// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iLog.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <stdafx.h>
#include <iLog.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __Gemma__Log__sendLog_name = "sendLog";

static const ::std::string __Gemma__Log__GetLog_name = "GetLog";

static const ::std::string __Gemma__Log__GetLastID_name = "GetLastID";

static const ::std::string __Gemma__Log__GetCountOffline_name = "GetCountOffline";

static const ::std::string __Gemma__Log__GetLogOffline_name = "GetLogOffline";

static const ::std::string __Gemma__Log__GetAlarmCount_name = "GetAlarmCount";

static const ::std::string __Gemma__Log__GetAlarms_name = "GetAlarms";

static const ::std::string __Gemma__Log__ClearAlarms_name = "ClearAlarms";

::Ice::Object* IceInternal::upCast(::Gemma::Log* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::Gemma::Log* p) { return p; }

void
Gemma::__read(::IceInternal::BasicStream* __is, ::Gemma::LogPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::Gemma::Log;
        v->__copyFrom(proxy);
    }
}

void
Gemma::LogMsg::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(nID);
    __os->write(nEventID);
    __os->write(lTime);
    __os->write(nParam1);
    __os->write(nParam2);
    __os->write(dParam1);
    __os->write(dParam2);
    __os->write(strUnit);
    __os->write(strMsg);
    __os->write(strUser);
    __os->write(nUnit);
    __os->write(nType);
    __os->write(bCleared);
}

void
Gemma::LogMsg::__read(::IceInternal::BasicStream* __is)
{
    __is->read(nID);
    __is->read(nEventID);
    __is->read(lTime);
    __is->read(nParam1);
    __is->read(nParam2);
    __is->read(dParam1);
    __is->read(dParam2);
    __is->read(strUnit);
    __is->read(strMsg);
    __is->read(strUser);
    __is->read(nUnit);
    __is->read(nType);
    __is->read(bCleared);
}

void
Gemma::AlarmMsg::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(nID);
    __os->write(nEventID);
    __os->write(firstTime);
    __os->write(lastTime);
    __os->write(strMsg);
    __os->write(nCount);
}

void
Gemma::AlarmMsg::__read(::IceInternal::BasicStream* __is)
{
    __is->read(nID);
    __is->read(nEventID);
    __is->read(firstTime);
    __is->read(lastTime);
    __is->read(strMsg);
    __is->read(nCount);
}

void
Gemma::__writeLogList(::IceInternal::BasicStream* __os, const ::Gemma::LogMsg* begin, const ::Gemma::LogMsg* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
Gemma::__readLogList(::IceInternal::BasicStream* __is, ::Gemma::LogList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(48, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
Gemma::__writeAlarmList(::IceInternal::BasicStream* __os, const ::Gemma::AlarmMsg* begin, const ::Gemma::AlarmMsg* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
Gemma::__readAlarmList(::IceInternal::BasicStream* __is, ::Gemma::AlarmList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(29, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

void
IceProxy::Gemma::Log::sendLog(const ::Gemma::LogList& data, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            __del->sendLog(data, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_sendLog(const ::Gemma::LogList& data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__sendLog_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__sendLog_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        if(data.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::Gemma::__writeLogList(__os, &data[0], &data[0] + data.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Gemma::Log::end_sendLog(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Gemma__Log__sendLog_name);
}

::Gemma::LogList
IceProxy::Gemma::Log::GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetLog_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetLog(nID, nCount, Types, IDS, skey, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetLog_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetLog_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetLog_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nID);
        __os->write(nCount);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Gemma::LogList
IceProxy::Gemma::Log::end_GetLog(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetLog_name);
    ::Gemma::LogList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::Gemma::__readLogList(__is, __ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::Gemma::Log::GetLastID(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetLastID_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetLastID(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetLastID(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetLastID_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetLastID_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetLastID_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Gemma::Log::end_GetLastID(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetLastID_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::Gemma::Log::GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetCountOffline_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetCountOffline_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetCountOffline_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetCountOffline_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(llDateTimeEnd);
        __os->write(llDateTimeBegin);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Gemma::Log::end_GetCountOffline(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetCountOffline_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Gemma::LogList
IceProxy::Gemma::Log::GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetLogOffline_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetLogOffline_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetLogOffline_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetLogOffline_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nIndex);
        __os->write(nCount);
        __os->write(llDateTimeEnd);
        __os->write(llDateTimeBegin);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Gemma::LogList
IceProxy::Gemma::Log::end_GetLogOffline(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetLogOffline_name);
    ::Gemma::LogList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::Gemma::__readLogList(__is, __ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::Gemma::Log::GetAlarmCount(const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetAlarmCount_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetAlarmCount(__ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetAlarmCount(const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetAlarmCount_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetAlarmCount_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetAlarmCount_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::Gemma::Log::end_GetAlarmCount(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetAlarmCount_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Gemma::AlarmList
IceProxy::Gemma::Log::GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__Gemma__Log__GetAlarms_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            return __del->GetAlarms(nIndex, nCount, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__Gemma__Log__GetAlarms_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__GetAlarms_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__GetAlarms_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nIndex);
        __os->write(nCount);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Gemma::AlarmList
IceProxy::Gemma::Log::end_GetAlarms(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __Gemma__Log__GetAlarms_name);
    ::Gemma::AlarmList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::Gemma::__readAlarmList(__is, __ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::Gemma::Log::ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::Gemma::Log* __del = dynamic_cast< ::IceDelegate::Gemma::Log*>(__delBase.get());
            __del->ClearAlarms(IDS, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::Gemma::Log::begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __Gemma__Log__ClearAlarms_name, __del, __cookie);
    try
    {
        __result->__prepare(__Gemma__Log__ClearAlarms_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::Gemma::Log::end_ClearAlarms(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __Gemma__Log__ClearAlarms_name);
}

const ::std::string&
IceProxy::Gemma::Log::ice_staticId()
{
    return ::Gemma::Log::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::Gemma::Log::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::Gemma::Log);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::Gemma::Log::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::Gemma::Log);
}

::IceProxy::Ice::Object*
IceProxy::Gemma::Log::__newInstance() const
{
    return new Log;
}

void
IceDelegateM::Gemma::Log::sendLog(const ::Gemma::LogList& data, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__sendLog_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        if(data.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::Gemma::__writeLogList(__os, &data[0], &data[0] + data.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Gemma::LogList
IceDelegateM::Gemma::Log::GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetLog_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nID);
        __os->write(nCount);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Gemma::LogList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::Gemma::__readLogList(__is, __ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::Gemma::Log::GetLastID(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetLastID_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::Gemma::Log::GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetCountOffline_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(llDateTimeEnd);
        __os->write(llDateTimeBegin);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Gemma::LogList
IceDelegateM::Gemma::Log::GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetLogOffline_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nIndex);
        __os->write(nCount);
        __os->write(llDateTimeEnd);
        __os->write(llDateTimeBegin);
        if(Types.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&Types[0], &Types[0] + Types.size());
        }
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
        __os->write(skey);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Gemma::LogList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::Gemma::__readLogList(__is, __ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::Gemma::Log::GetAlarmCount(const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetAlarmCount_name, ::Ice::Idempotent, __context);
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Gemma::AlarmList
IceDelegateM::Gemma::Log::GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__GetAlarms_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nIndex);
        __os->write(nCount);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Gemma::AlarmList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::Gemma::__readAlarmList(__is, __ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::Gemma::Log::ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __Gemma__Log__ClearAlarms_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        if(IDS.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            __os->write(&IDS[0], &IDS[0] + IDS.size());
        }
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateD::Gemma::Log::sendLog(const ::Gemma::LogList& data, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Gemma::LogList& data, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_data(data)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->sendLog(_m_data, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Gemma::LogList& _m_data;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__sendLog_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(data, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Gemma::LogList
IceDelegateD::Gemma::Log::GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Gemma::LogList& __result, ::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nID(nID),
            _m_nCount(nCount),
            _m_Types(Types),
            _m_IDS(IDS),
            _m_skey(skey)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetLog(_m_nID, _m_nCount, _m_Types, _m_IDS, _m_skey, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Gemma::LogList& _result;
        ::Ice::Int _m_nID;
        ::Ice::Int _m_nCount;
        const ::Gemma::IDList& _m_Types;
        const ::Gemma::IDList& _m_IDS;
        const ::std::string& _m_skey;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetLog_name, ::Ice::Idempotent, __context);
    ::Gemma::LogList __result;
    try
    {
        _DirectI __direct(__result, nID, nCount, Types, IDS, skey, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::Gemma::Log::GetLastID(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetLastID(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetLastID_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::Gemma::Log::GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_llDateTimeEnd(llDateTimeEnd),
            _m_llDateTimeBegin(llDateTimeBegin),
            _m_Types(Types),
            _m_IDS(IDS),
            _m_skey(skey)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetCountOffline(_m_llDateTimeEnd, _m_llDateTimeBegin, _m_Types, _m_IDS, _m_skey, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Long _m_llDateTimeEnd;
        ::Ice::Long _m_llDateTimeBegin;
        const ::Gemma::IDList& _m_Types;
        const ::Gemma::IDList& _m_IDS;
        const ::std::string& _m_skey;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetCountOffline_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Gemma::LogList
IceDelegateD::Gemma::Log::GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Gemma::LogList& __result, ::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nIndex(nIndex),
            _m_nCount(nCount),
            _m_llDateTimeEnd(llDateTimeEnd),
            _m_llDateTimeBegin(llDateTimeBegin),
            _m_Types(Types),
            _m_IDS(IDS),
            _m_skey(skey)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetLogOffline(_m_nIndex, _m_nCount, _m_llDateTimeEnd, _m_llDateTimeBegin, _m_Types, _m_IDS, _m_skey, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Gemma::LogList& _result;
        ::Ice::Int _m_nIndex;
        ::Ice::Int _m_nCount;
        ::Ice::Long _m_llDateTimeEnd;
        ::Ice::Long _m_llDateTimeBegin;
        const ::Gemma::IDList& _m_Types;
        const ::Gemma::IDList& _m_IDS;
        const ::std::string& _m_skey;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetLogOffline_name, ::Ice::Idempotent, __context);
    ::Gemma::LogList __result;
    try
    {
        _DirectI __direct(__result, nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::Gemma::Log::GetAlarmCount(const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetAlarmCount(_current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetAlarmCount_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Gemma::AlarmList
IceDelegateD::Gemma::Log::GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Gemma::AlarmList& __result, ::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nIndex(nIndex),
            _m_nCount(nCount)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetAlarms(_m_nIndex, _m_nCount, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Gemma::AlarmList& _result;
        ::Ice::Int _m_nIndex;
        ::Ice::Int _m_nCount;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__GetAlarms_name, ::Ice::Idempotent, __context);
    ::Gemma::AlarmList __result;
    try
    {
        _DirectI __direct(__result, nIndex, nCount, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::Gemma::Log::ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::Gemma::IDList& IDS, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_IDS(IDS)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::Gemma::Log* servant = dynamic_cast< ::Gemma::Log*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->ClearAlarms(_m_IDS, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::Gemma::IDList& _m_IDS;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __Gemma__Log__ClearAlarms_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(IDS, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::ObjectPtr
Gemma::Log::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __Gemma__Log_ids[2] =
{
    "::Gemma::Log",
    "::Ice::Object"
};

bool
Gemma::Log::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__Gemma__Log_ids, __Gemma__Log_ids + 2, _s);
}

::std::vector< ::std::string>
Gemma::Log::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__Gemma__Log_ids[0], &__Gemma__Log_ids[2]);
}

const ::std::string&
Gemma::Log::ice_id(const ::Ice::Current&) const
{
    return __Gemma__Log_ids[0];
}

const ::std::string&
Gemma::Log::ice_staticId()
{
    return __Gemma__Log_ids[0];
}

::Ice::DispatchStatus
Gemma::Log::___sendLog(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Gemma::LogList data;
    ::Gemma::__readLogList(__is, data);
    __is->endReadEncaps();
    sendLog(data, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetLog(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nID;
    ::Ice::Int nCount;
    ::Gemma::IDList Types;
    ::Gemma::IDList IDS;
    ::std::string skey;
    __is->read(nID);
    __is->read(nCount);
    __is->read(Types);
    __is->read(IDS);
    __is->read(skey);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Gemma::LogList __ret = GetLog(nID, nCount, Types, IDS, skey, __current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Gemma::__writeLogList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetLastID(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = GetLastID(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetCountOffline(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Long llDateTimeEnd;
    ::Ice::Long llDateTimeBegin;
    ::Gemma::IDList Types;
    ::Gemma::IDList IDS;
    ::std::string skey;
    __is->read(llDateTimeEnd);
    __is->read(llDateTimeBegin);
    __is->read(Types);
    __is->read(IDS);
    __is->read(skey);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetLogOffline(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nIndex;
    ::Ice::Int nCount;
    ::Ice::Long llDateTimeEnd;
    ::Ice::Long llDateTimeBegin;
    ::Gemma::IDList Types;
    ::Gemma::IDList IDS;
    ::std::string skey;
    __is->read(nIndex);
    __is->read(nCount);
    __is->read(llDateTimeEnd);
    __is->read(llDateTimeBegin);
    __is->read(Types);
    __is->read(IDS);
    __is->read(skey);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Gemma::LogList __ret = GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, __current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Gemma::__writeLogList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetAlarmCount(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    __inS.is()->skipEmptyEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = GetAlarmCount(__current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___GetAlarms(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nIndex;
    ::Ice::Int nCount;
    __is->read(nIndex);
    __is->read(nCount);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Gemma::AlarmList __ret = GetAlarms(nIndex, nCount, __current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::Gemma::__writeAlarmList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
Gemma::Log::___ClearAlarms(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Gemma::IDList IDS;
    __is->read(IDS);
    __is->endReadEncaps();
    ClearAlarms(IDS, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __Gemma__Log_all[] =
{
    "ClearAlarms",
    "GetAlarmCount",
    "GetAlarms",
    "GetCountOffline",
    "GetLastID",
    "GetLog",
    "GetLogOffline",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping",
    "sendLog"
};

::Ice::DispatchStatus
Gemma::Log::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__Gemma__Log_all, __Gemma__Log_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __Gemma__Log_all)
    {
        case 0:
        {
            return ___ClearAlarms(in, current);
        }
        case 1:
        {
            return ___GetAlarmCount(in, current);
        }
        case 2:
        {
            return ___GetAlarms(in, current);
        }
        case 3:
        {
            return ___GetCountOffline(in, current);
        }
        case 4:
        {
            return ___GetLastID(in, current);
        }
        case 5:
        {
            return ___GetLog(in, current);
        }
        case 6:
        {
            return ___GetLogOffline(in, current);
        }
        case 7:
        {
            return ___ice_id(in, current);
        }
        case 8:
        {
            return ___ice_ids(in, current);
        }
        case 9:
        {
            return ___ice_isA(in, current);
        }
        case 10:
        {
            return ___ice_ping(in, current);
        }
        case 11:
        {
            return ___sendLog(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
Gemma::Log::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
Gemma::Log::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
Gemma::Log::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Gemma::Log was not generated with stream support";
    throw ex;
}

void
Gemma::Log::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type Gemma::Log was not generated with stream support";
    throw ex;
}
#endif

void 
Gemma::__patch__LogPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::Gemma::LogPtr* p = static_cast< ::Gemma::LogPtr*>(__addr);
    assert(p);
    *p = ::Gemma::LogPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::Gemma::Log::ice_staticId(), v->ice_id());
    }
}
