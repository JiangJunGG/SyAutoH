// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iLog.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//


using _System = global::System;
using _Microsoft = global::Microsoft;

#pragma warning disable 1591

namespace Gemma
{
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class LogMsg : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nEventID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public long lTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nParam1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nParam2;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public double dParam1;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public double dParam2;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string strUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string strMsg;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string strUser;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public short nUnit;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public short nType;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public bool bCleared;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public LogMsg()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public LogMsg(int nID, int nEventID, long lTime, int nParam1, int nParam2, double dParam1, double dParam2, string strUnit, string strMsg, string strUser, short nUnit, short nType, bool bCleared)
        {
            this.nID = nID;
            this.nEventID = nEventID;
            this.lTime = lTime;
            this.nParam1 = nParam1;
            this.nParam2 = nParam2;
            this.dParam1 = dParam1;
            this.dParam2 = dParam2;
            this.strUnit = strUnit;
            this.strMsg = strMsg;
            this.strUser = strUser;
            this.nUnit = nUnit;
            this.nType = nType;
            this.bCleared = bCleared;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + nID.GetHashCode();
            h__ = 5 * h__ + nEventID.GetHashCode();
            h__ = 5 * h__ + lTime.GetHashCode();
            h__ = 5 * h__ + nParam1.GetHashCode();
            h__ = 5 * h__ + nParam2.GetHashCode();
            h__ = 5 * h__ + dParam1.GetHashCode();
            h__ = 5 * h__ + dParam2.GetHashCode();
            if(strUnit != null)
            {
                h__ = 5 * h__ + strUnit.GetHashCode();
            }
            if(strMsg != null)
            {
                h__ = 5 * h__ + strMsg.GetHashCode();
            }
            if(strUser != null)
            {
                h__ = 5 * h__ + strUser.GetHashCode();
            }
            h__ = 5 * h__ + nUnit.GetHashCode();
            h__ = 5 * h__ + nType.GetHashCode();
            h__ = 5 * h__ + bCleared.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            LogMsg o__ = (LogMsg)other__;
            if(!nID.Equals(o__.nID))
            {
                return false;
            }
            if(!nEventID.Equals(o__.nEventID))
            {
                return false;
            }
            if(!lTime.Equals(o__.lTime))
            {
                return false;
            }
            if(!nParam1.Equals(o__.nParam1))
            {
                return false;
            }
            if(!nParam2.Equals(o__.nParam2))
            {
                return false;
            }
            if(!dParam1.Equals(o__.dParam1))
            {
                return false;
            }
            if(!dParam2.Equals(o__.dParam2))
            {
                return false;
            }
            if(strUnit == null)
            {
                if(o__.strUnit != null)
                {
                    return false;
                }
            }
            else
            {
                if(!strUnit.Equals(o__.strUnit))
                {
                    return false;
                }
            }
            if(strMsg == null)
            {
                if(o__.strMsg != null)
                {
                    return false;
                }
            }
            else
            {
                if(!strMsg.Equals(o__.strMsg))
                {
                    return false;
                }
            }
            if(strUser == null)
            {
                if(o__.strUser != null)
                {
                    return false;
                }
            }
            else
            {
                if(!strUser.Equals(o__.strUser))
                {
                    return false;
                }
            }
            if(!nUnit.Equals(o__.nUnit))
            {
                return false;
            }
            if(!nType.Equals(o__.nType))
            {
                return false;
            }
            if(!bCleared.Equals(o__.bCleared))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(LogMsg lhs__, LogMsg rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(LogMsg lhs__, LogMsg rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(nID);
            os__.writeInt(nEventID);
            os__.writeLong(lTime);
            os__.writeInt(nParam1);
            os__.writeInt(nParam2);
            os__.writeDouble(dParam1);
            os__.writeDouble(dParam2);
            os__.writeString(strUnit);
            os__.writeString(strMsg);
            os__.writeString(strUser);
            os__.writeShort(nUnit);
            os__.writeShort(nType);
            os__.writeBool(bCleared);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            nID = is__.readInt();
            nEventID = is__.readInt();
            lTime = is__.readLong();
            nParam1 = is__.readInt();
            nParam2 = is__.readInt();
            dParam1 = is__.readDouble();
            dParam2 = is__.readDouble();
            strUnit = is__.readString();
            strMsg = is__.readString();
            strUser = is__.readString();
            nUnit = is__.readShort();
            nType = is__.readShort();
            bCleared = is__.readBool();
        }

        #endregion
    }

    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial class AlarmMsg : _System.ICloneable
    {
        #region Slice data members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nEventID;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public long firstTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public long lastTime;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public string strMsg;

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public int nCount;

        #endregion

        #region Constructors

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public AlarmMsg()
        {
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public AlarmMsg(int nID, int nEventID, long firstTime, long lastTime, string strMsg, int nCount)
        {
            this.nID = nID;
            this.nEventID = nEventID;
            this.firstTime = firstTime;
            this.lastTime = lastTime;
            this.strMsg = strMsg;
            this.nCount = nCount;
        }

        #endregion

        #region ICloneable members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public object Clone()
        {
            return MemberwiseClone();
        }

        #endregion

        #region Object members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override int GetHashCode()
        {
            int h__ = 0;
            h__ = 5 * h__ + nID.GetHashCode();
            h__ = 5 * h__ + nEventID.GetHashCode();
            h__ = 5 * h__ + firstTime.GetHashCode();
            h__ = 5 * h__ + lastTime.GetHashCode();
            if(strMsg != null)
            {
                h__ = 5 * h__ + strMsg.GetHashCode();
            }
            h__ = 5 * h__ + nCount.GetHashCode();
            return h__;
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public override bool Equals(object other__)
        {
            if(object.ReferenceEquals(this, other__))
            {
                return true;
            }
            if(other__ == null)
            {
                return false;
            }
            if(GetType() != other__.GetType())
            {
                return false;
            }
            AlarmMsg o__ = (AlarmMsg)other__;
            if(!nID.Equals(o__.nID))
            {
                return false;
            }
            if(!nEventID.Equals(o__.nEventID))
            {
                return false;
            }
            if(!firstTime.Equals(o__.firstTime))
            {
                return false;
            }
            if(!lastTime.Equals(o__.lastTime))
            {
                return false;
            }
            if(strMsg == null)
            {
                if(o__.strMsg != null)
                {
                    return false;
                }
            }
            else
            {
                if(!strMsg.Equals(o__.strMsg))
                {
                    return false;
                }
            }
            if(!nCount.Equals(o__.nCount))
            {
                return false;
            }
            return true;
        }

        #endregion

        #region Comparison members

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator==(AlarmMsg lhs__, AlarmMsg rhs__)
        {
            return Equals(lhs__, rhs__);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public static bool operator!=(AlarmMsg lhs__, AlarmMsg rhs__)
        {
            return !Equals(lhs__, rhs__);
        }

        #endregion

        #region Marshalling support

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void write__(IceInternal.BasicStream os__)
        {
            os__.writeInt(nID);
            os__.writeInt(nEventID);
            os__.writeLong(firstTime);
            os__.writeLong(lastTime);
            os__.writeString(strMsg);
            os__.writeInt(nCount);
        }

        [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
        public void read__(IceInternal.BasicStream is__)
        {
            nID = is__.readInt();
            nEventID = is__.readInt();
            firstTime = is__.readLong();
            lastTime = is__.readLong();
            strMsg = is__.readString();
            nCount = is__.readInt();
        }

        #endregion
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1704")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1707")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1709")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1710")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1711")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1715")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1716")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1720")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1722")]
    [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Naming", "CA1724")]
    public partial interface Log : Ice.Object, LogOperations_, LogOperationsNC_
    {
    }
}

namespace Gemma
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_sendLog();

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetLog(Gemma.LogMsg[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetLastID(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetCountOffline(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetLogOffline(Gemma.LogMsg[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetAlarmCount(int ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_GetAlarms(Gemma.AlarmMsg[] ret__);

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public delegate void Callback_Log_ClearAlarms();
}

namespace Gemma
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface LogPrx : Ice.ObjectPrx
    {
        void sendLog(Gemma.LogMsg[] data);
        void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_sendLog> begin_sendLog(Gemma.LogMsg[] data);
        Ice.AsyncResult<Gemma.Callback_Log_sendLog> begin_sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_sendLog(Gemma.LogMsg[] data, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_sendLog(Ice.AsyncResult r__);

        Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey);
        Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetLog> begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey);
        Ice.AsyncResult<Gemma.Callback_Log_GetLog> begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Gemma.LogMsg[] end_GetLog(Ice.AsyncResult r__);

        int GetLastID();
        int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetLastID> begin_GetLastID();
        Ice.AsyncResult<Gemma.Callback_Log_GetLastID> begin_GetLastID(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetLastID(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetLastID(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetLastID(Ice.AsyncResult r__);

        int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);
        int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetCountOffline> begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);
        Ice.AsyncResult<Gemma.Callback_Log_GetCountOffline> begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetCountOffline(Ice.AsyncResult r__);

        Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);
        Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetLogOffline> begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);
        Ice.AsyncResult<Gemma.Callback_Log_GetLogOffline> begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Gemma.LogMsg[] end_GetLogOffline(Ice.AsyncResult r__);

        int GetAlarmCount();
        int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetAlarmCount> begin_GetAlarmCount();
        Ice.AsyncResult<Gemma.Callback_Log_GetAlarmCount> begin_GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetAlarmCount(Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        int end_GetAlarmCount(Ice.AsyncResult r__);

        Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount);
        Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_GetAlarms> begin_GetAlarms(int nIndex, int nCount);
        Ice.AsyncResult<Gemma.Callback_Log_GetAlarms> begin_GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_GetAlarms(int nIndex, int nCount, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        Gemma.AlarmMsg[] end_GetAlarms(Ice.AsyncResult r__);

        void ClearAlarms(int[] IDS);
        void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__);

        Ice.AsyncResult<Gemma.Callback_Log_ClearAlarms> begin_ClearAlarms(int[] IDS);
        Ice.AsyncResult<Gemma.Callback_Log_ClearAlarms> begin_ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> ctx__);

        Ice.AsyncResult begin_ClearAlarms(int[] IDS, Ice.AsyncCallback cb__, object cookie__);
        Ice.AsyncResult begin_ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__);

        void end_ClearAlarms(Ice.AsyncResult r__);
    }
}

namespace Gemma
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface LogOperations_
    {
        void sendLog(Gemma.LogMsg[] data, Ice.Current current__);

        Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, Ice.Current current__);

        int GetLastID(Ice.Current current__);

        int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.Current current__);

        Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.Current current__);

        int GetAlarmCount(Ice.Current current__);

        Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, Ice.Current current__);

        void ClearAlarms(int[] IDS, Ice.Current current__);
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface LogOperationsNC_
    {
        void sendLog(Gemma.LogMsg[] data);

        Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey);

        int GetLastID();

        int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);

        Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey);

        int GetAlarmCount();

        Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount);

        void ClearAlarms(int[] IDS);
    }
}

namespace Gemma
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class LogListHelper
    {
        public static void write(IceInternal.BasicStream os__, Gemma.LogMsg[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Gemma.LogMsg() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Gemma.LogMsg[] read(IceInternal.BasicStream is__)
        {
            Gemma.LogMsg[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(48);
                v__ = new Gemma.LogMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Gemma.LogMsg();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class AlarmListHelper
    {
        public static void write(IceInternal.BasicStream os__, Gemma.AlarmMsg[] v__)
        {
            if(v__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(v__.Length);
                for(int ix__ = 0; ix__ < v__.Length; ++ix__)
                {
                    (v__[ix__] == null ? new Gemma.AlarmMsg() : v__[ix__]).write__(os__);
                }
            }
        }

        public static Gemma.AlarmMsg[] read(IceInternal.BasicStream is__)
        {
            Gemma.AlarmMsg[] v__;
            {
                int szx__ = is__.readAndCheckSeqSize(29);
                v__ = new Gemma.AlarmMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    v__[ix__] = new Gemma.AlarmMsg();
                    v__[ix__].read__(is__);
                }
            }
            return v__;
        }
    }

    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class IDListHelper
    {
        public static void write(IceInternal.BasicStream os__, int[] v__)
        {
            os__.writeIntSeq(v__);
        }

        public static int[] read(IceInternal.BasicStream is__)
        {
            int[] v__;
            v__ = is__.readIntSeq();
            return v__;
        }
    }

    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class LogPrxHelper : Ice.ObjectPrxHelperBase, LogPrx
    {
        #region Synchronous operations

        public void ClearAlarms(int[] IDS)
        {
            ClearAlarms(IDS, null, false);
        }

        public void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            ClearAlarms(IDS, context__, true);
        }

        private void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    del__.ClearAlarms(IDS, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int GetAlarmCount()
        {
            return GetAlarmCount(null, false);
        }

        public int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetAlarmCount(context__, true);
        }

        private int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetAlarmCount");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetAlarmCount(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount)
        {
            return GetAlarms(nIndex, nCount, null, false);
        }

        public Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetAlarms(nIndex, nCount, context__, true);
        }

        private Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetAlarms");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetAlarms(nIndex, nCount, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false);
        }

        public int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, context__, true);
        }

        private int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetCountOffline");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public int GetLastID()
        {
            return GetLastID(null, false);
        }

        public int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetLastID(context__, true);
        }

        private int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetLastID");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetLastID(context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey)
        {
            return GetLog(nID, nCount, Types, IDS, skey, null, false);
        }

        public Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetLog(nID, nCount, Types, IDS, skey, context__, true);
        }

        private Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetLog");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetLog(nID, nCount, Types, IDS, skey, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false);
        }

        public Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            return GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, context__, true);
        }

        private Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    checkTwowayOnly__("GetLogOffline");
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    return del__.GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, context__);
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        public void sendLog(Gemma.LogMsg[] data)
        {
            sendLog(data, null, false);
        }

        public void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            sendLog(data, context__, true);
        }

        private void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__, bool explicitContext__)
        {
            if(explicitContext__ && context__ == null)
            {
                context__ = emptyContext_;
            }
            int cnt__ = 0;
            while(true)
            {
                Ice.ObjectDel_ delBase__ = null;
                try
                {
                    delBase__ = getDelegate__(false);
                    LogDel_ del__ = (LogDel_)delBase__;
                    del__.sendLog(data, context__);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper ex__)
                {
                    handleExceptionWrapperRelaxed__(delBase__, ex__, true, ref cnt__);
                }
                catch(Ice.LocalException ex__)
                {
                    handleException__(delBase__, ex__, true, ref cnt__);
                }
            }
        }

        #endregion

        #region Asynchronous operations

        public Ice.AsyncResult<Gemma.Callback_Log_ClearAlarms> begin_ClearAlarms(int[] IDS)
        {
            return begin_ClearAlarms(IDS, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_ClearAlarms> begin_ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_ClearAlarms(IDS, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_ClearAlarms(int[] IDS, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ClearAlarms(IDS, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_ClearAlarms(IDS, ctx__, true, cb__, cookie__);
        }

        private const string __ClearAlarms_name = "ClearAlarms";

        public void end_ClearAlarms(Ice.AsyncResult r__)
        {
            end__(r__, __ClearAlarms_name);
        }

        private Ice.AsyncResult<Gemma.Callback_Log_ClearAlarms> begin_ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Gemma.Callback_Log_ClearAlarms> result__ = new IceInternal.OnewayOutgoingAsync<Gemma.Callback_Log_ClearAlarms>(this, __ClearAlarms_name, ClearAlarms_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__ClearAlarms_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeIntSeq(IDS);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void ClearAlarms_completed__(Gemma.Callback_Log_ClearAlarms cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetAlarmCount> begin_GetAlarmCount()
        {
            return begin_GetAlarmCount(null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetAlarmCount> begin_GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetAlarmCount(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetAlarmCount(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAlarmCount(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAlarmCount(ctx__, true, cb__, cookie__);
        }

        private const string __GetAlarmCount_name = "GetAlarmCount";

        public int end_GetAlarmCount(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetAlarmCount_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetAlarmCount> begin_GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetAlarmCount_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetAlarmCount> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetAlarmCount>(this, __GetAlarmCount_name, GetAlarmCount_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetAlarmCount_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetAlarmCount_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetAlarmCount cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetAlarmCount(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetAlarms> begin_GetAlarms(int nIndex, int nCount)
        {
            return begin_GetAlarms(nIndex, nCount, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetAlarms> begin_GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetAlarms(nIndex, nCount, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetAlarms(int nIndex, int nCount, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAlarms(nIndex, nCount, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetAlarms(nIndex, nCount, ctx__, true, cb__, cookie__);
        }

        private const string __GetAlarms_name = "GetAlarms";

        public Gemma.AlarmMsg[] end_GetAlarms(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetAlarms_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Gemma.AlarmMsg[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(29);
                ret__ = new Gemma.AlarmMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new Gemma.AlarmMsg();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetAlarms> begin_GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetAlarms_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetAlarms> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetAlarms>(this, __GetAlarms_name, GetAlarms_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetAlarms_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nIndex);
                os__.writeInt(nCount);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetAlarms_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetAlarms cb__, Ice.ExceptionCallback excb__)
        {
            Gemma.AlarmMsg[] ret__;
            try
            {
                ret__ = end_GetAlarms(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetCountOffline> begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetCountOffline> begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, ctx__, true, cb__, cookie__);
        }

        private const string __GetCountOffline_name = "GetCountOffline";

        public int end_GetCountOffline(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetCountOffline_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetCountOffline> begin_GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetCountOffline_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetCountOffline> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetCountOffline>(this, __GetCountOffline_name, GetCountOffline_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetCountOffline_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeLong(llDateTimeEnd);
                os__.writeLong(llDateTimeBegin);
                os__.writeIntSeq(Types);
                os__.writeIntSeq(IDS);
                os__.writeString(skey);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetCountOffline_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetCountOffline cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetCountOffline(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLastID> begin_GetLastID()
        {
            return begin_GetLastID(null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLastID> begin_GetLastID(_System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetLastID(ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetLastID(Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLastID(null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetLastID(_System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLastID(ctx__, true, cb__, cookie__);
        }

        private const string __GetLastID_name = "GetLastID";

        public int end_GetLastID(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetLastID_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            int ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            ret__ = is__.readInt();
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetLastID> begin_GetLastID(_System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetLastID_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLastID> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLastID>(this, __GetLastID_name, GetLastID_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetLastID_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetLastID_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetLastID cb__, Ice.ExceptionCallback excb__)
        {
            int ret__;
            try
            {
                ret__ = end_GetLastID(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLog> begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey)
        {
            return begin_GetLog(nID, nCount, Types, IDS, skey, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLog> begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetLog(nID, nCount, Types, IDS, skey, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLog(nID, nCount, Types, IDS, skey, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLog(nID, nCount, Types, IDS, skey, ctx__, true, cb__, cookie__);
        }

        private const string __GetLog_name = "GetLog";

        public Gemma.LogMsg[] end_GetLog(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetLog_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Gemma.LogMsg[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(48);
                ret__ = new Gemma.LogMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new Gemma.LogMsg();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetLog> begin_GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetLog_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLog> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLog>(this, __GetLog_name, GetLog_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetLog_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nID);
                os__.writeInt(nCount);
                os__.writeIntSeq(Types);
                os__.writeIntSeq(IDS);
                os__.writeString(skey);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetLog_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetLog cb__, Ice.ExceptionCallback excb__)
        {
            Gemma.LogMsg[] ret__;
            try
            {
                ret__ = end_GetLog(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLogOffline> begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_GetLogOffline> begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, ctx__, true, cb__, cookie__);
        }

        private const string __GetLogOffline_name = "GetLogOffline";

        public Gemma.LogMsg[] end_GetLogOffline(Ice.AsyncResult r__)
        {
            IceInternal.OutgoingAsync outAsync__ = (IceInternal.OutgoingAsync)r__;
            IceInternal.OutgoingAsync.check__(outAsync__, this, __GetLogOffline_name);
            if(!outAsync__.wait__())
            {
                try
                {
                    outAsync__.throwUserException__();
                }
                catch(Ice.UserException ex__)
                {
                    throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                }
            }
            Gemma.LogMsg[] ret__;
            IceInternal.BasicStream is__ = outAsync__.istr__;
            is__.startReadEncaps();
            {
                int szx__ = is__.readAndCheckSeqSize(48);
                ret__ = new Gemma.LogMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    ret__[ix__] = new Gemma.LogMsg();
                    ret__[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            return ret__;
        }

        private Ice.AsyncResult<Gemma.Callback_Log_GetLogOffline> begin_GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            checkAsyncTwowayOnly__(__GetLogOffline_name);
            IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLogOffline> result__ =  new IceInternal.TwowayOutgoingAsync<Gemma.Callback_Log_GetLogOffline>(this, __GetLogOffline_name, GetLogOffline_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__GetLogOffline_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                os__.writeInt(nIndex);
                os__.writeInt(nCount);
                os__.writeLong(llDateTimeEnd);
                os__.writeLong(llDateTimeBegin);
                os__.writeIntSeq(Types);
                os__.writeIntSeq(IDS);
                os__.writeString(skey);
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void GetLogOffline_completed__(Ice.AsyncResult r__, Gemma.Callback_Log_GetLogOffline cb__, Ice.ExceptionCallback excb__)
        {
            Gemma.LogMsg[] ret__;
            try
            {
                ret__ = end_GetLogOffline(r__);
            }
            catch(Ice.Exception ex__)
            {
                if(excb__ != null)
                {
                    excb__(ex__);
                }
                return;
            }
            if(cb__ != null)
            {
                cb__(ret__);
            }
        }

        public Ice.AsyncResult<Gemma.Callback_Log_sendLog> begin_sendLog(Gemma.LogMsg[] data)
        {
            return begin_sendLog(data, null, false, null, null);
        }

        public Ice.AsyncResult<Gemma.Callback_Log_sendLog> begin_sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> ctx__)
        {
            return begin_sendLog(data, ctx__, true, null, null);
        }

        public Ice.AsyncResult begin_sendLog(Gemma.LogMsg[] data, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendLog(data, null, false, cb__, cookie__);
        }

        public Ice.AsyncResult begin_sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> ctx__, Ice.AsyncCallback cb__, object cookie__)
        {
            return begin_sendLog(data, ctx__, true, cb__, cookie__);
        }

        private const string __sendLog_name = "sendLog";

        public void end_sendLog(Ice.AsyncResult r__)
        {
            end__(r__, __sendLog_name);
        }

        private Ice.AsyncResult<Gemma.Callback_Log_sendLog> begin_sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> ctx__, bool explicitContext__, Ice.AsyncCallback cb__, object cookie__)
        {
            IceInternal.OnewayOutgoingAsync<Gemma.Callback_Log_sendLog> result__ = new IceInternal.OnewayOutgoingAsync<Gemma.Callback_Log_sendLog>(this, __sendLog_name, sendLog_completed__, cookie__);
            if(cb__ != null)
            {
                result__.whenCompletedWithAsyncCallback(cb__);
            }
            try
            {
                result__.prepare__(__sendLog_name, Ice.OperationMode.Idempotent, ctx__, explicitContext__);
                IceInternal.BasicStream os__ = result__.ostr__;
                if(data == null)
                {
                    os__.writeSize(0);
                }
                else
                {
                    os__.writeSize(data.Length);
                    for(int ix__ = 0; ix__ < data.Length; ++ix__)
                    {
                        (data[ix__] == null ? new Gemma.LogMsg() : data[ix__]).write__(os__);
                    }
                }
                os__.endWriteEncaps();
                result__.send__(true);
            }
            catch(Ice.LocalException ex__)
            {
                result__.exceptionAsync__(ex__);
            }
            return result__;
        }

        private void sendLog_completed__(Gemma.Callback_Log_sendLog cb__)
        {
            if(cb__ != null)
            {
                cb__();
            }
        }

        #endregion

        #region Checked and unchecked cast operations

        public static LogPrx checkedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LogPrx r = b as LogPrx;
            if((r == null) && b.ice_isA(ice_staticId()))
            {
                LogPrxHelper h = new LogPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LogPrx checkedCast(Ice.ObjectPrx b, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            LogPrx r = b as LogPrx;
            if((r == null) && b.ice_isA(ice_staticId(), ctx))
            {
                LogPrxHelper h = new LogPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LogPrx checkedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId()))
                {
                    LogPrxHelper h = new LogPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LogPrx checkedCast(Ice.ObjectPrx b, string f, _System.Collections.Generic.Dictionary<string, string> ctx)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            try
            {
                if(bb.ice_isA(ice_staticId(), ctx))
                {
                    LogPrxHelper h = new LogPrxHelper();
                    h.copyFrom__(bb);
                    return h;
                }
            }
            catch(Ice.FacetNotExistException)
            {
            }
            return null;
        }

        public static LogPrx uncheckedCast(Ice.ObjectPrx b)
        {
            if(b == null)
            {
                return null;
            }
            LogPrx r = b as LogPrx;
            if(r == null)
            {
                LogPrxHelper h = new LogPrxHelper();
                h.copyFrom__(b);
                r = h;
            }
            return r;
        }

        public static LogPrx uncheckedCast(Ice.ObjectPrx b, string f)
        {
            if(b == null)
            {
                return null;
            }
            Ice.ObjectPrx bb = b.ice_facet(f);
            LogPrxHelper h = new LogPrxHelper();
            h.copyFrom__(bb);
            return h;
        }

        public static readonly string[] ids__ =
        {
            "::Gemma::Log",
            "::Ice::Object"
        };

        public static string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Marshaling support

        protected override Ice.ObjectDelM_ createDelegateM__()
        {
            return new LogDelM_();
        }

        protected override Ice.ObjectDelD_ createDelegateD__()
        {
            return new LogDelD_();
        }

        public static void write__(IceInternal.BasicStream os__, LogPrx v__)
        {
            os__.writeProxy(v__);
        }

        public static LogPrx read__(IceInternal.BasicStream is__)
        {
            Ice.ObjectPrx proxy = is__.readProxy();
            if(proxy != null)
            {
                LogPrxHelper result = new LogPrxHelper();
                result.copyFrom__(proxy);
                return result;
            }
            return null;
        }

        #endregion
    }
}

namespace Gemma
{
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public interface LogDel_ : Ice.ObjectDel_
    {
        void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__);

        Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__);

        int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__);

        int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__);

        Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__);

        void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__);
    }
}

namespace Gemma
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class LogDelM_ : Ice.ObjectDelM_, LogDel_
    {
        public void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("ClearAlarms", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeIntSeq(IDS);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetAlarmCount", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetAlarms", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nIndex);
                    os__.writeInt(nCount);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Gemma.AlarmMsg[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(29);
                        ret__ = new Gemma.AlarmMsg[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new Gemma.AlarmMsg();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetCountOffline", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeLong(llDateTimeEnd);
                    os__.writeLong(llDateTimeBegin);
                    os__.writeIntSeq(Types);
                    os__.writeIntSeq(IDS);
                    os__.writeString(skey);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetLastID", Ice.OperationMode.Idempotent, context__);
            try
            {
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    int ret__;
                    ret__ = is__.readInt();
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetLog", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nID);
                    os__.writeInt(nCount);
                    os__.writeIntSeq(Types);
                    os__.writeIntSeq(IDS);
                    os__.writeString(skey);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Gemma.LogMsg[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(48);
                        ret__ = new Gemma.LogMsg[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new Gemma.LogMsg();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("GetLogOffline", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    os__.writeInt(nIndex);
                    os__.writeInt(nCount);
                    os__.writeLong(llDateTimeEnd);
                    os__.writeLong(llDateTimeBegin);
                    os__.writeIntSeq(Types);
                    os__.writeIntSeq(IDS);
                    os__.writeString(skey);
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                try
                {
                    if(!ok__)
                    {
                        try
                        {
                            og__.throwUserException();
                        }
                        catch(Ice.UserException ex__)
                        {
                            throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                        }
                    }
                    IceInternal.BasicStream is__ = og__.istr();
                    is__.startReadEncaps();
                    Gemma.LogMsg[] ret__;
                    {
                        int szx__ = is__.readAndCheckSeqSize(48);
                        ret__ = new Gemma.LogMsg[szx__];
                        for(int ix__ = 0; ix__ < szx__; ++ix__)
                        {
                            ret__[ix__] = new Gemma.LogMsg();
                            ret__[ix__].read__(is__);
                        }
                    }
                    is__.endReadEncaps();
                    return ret__;
                }
                catch(Ice.LocalException ex__)
                {
                    throw new IceInternal.LocalExceptionWrapper(ex__, false);
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }

        public void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            IceInternal.Outgoing og__ = handler__.getOutgoing("sendLog", Ice.OperationMode.Idempotent, context__);
            try
            {
                try
                {
                    IceInternal.BasicStream os__ = og__.ostr();
                    if(data == null)
                    {
                        os__.writeSize(0);
                    }
                    else
                    {
                        os__.writeSize(data.Length);
                        for(int ix__ = 0; ix__ < data.Length; ++ix__)
                        {
                            (data[ix__] == null ? new Gemma.LogMsg() : data[ix__]).write__(os__);
                        }
                    }
                }
                catch(Ice.LocalException ex__)
                {
                    og__.abort(ex__);
                }
                bool ok__ = og__.invoke();
                if(!og__.istr().isEmpty())
                {
                    try
                    {
                        if(!ok__)
                        {
                            try
                            {
                                og__.throwUserException();
                            }
                            catch(Ice.UserException ex__)
                            {
                                throw new Ice.UnknownUserException(ex__.ice_name(), ex__);
                            }
                        }
                        og__.istr().skipEmptyEncaps();
                    }
                    catch(Ice.LocalException ex__)
                    {
                        throw new IceInternal.LocalExceptionWrapper(ex__, false);
                    }
                }
            }
            finally
            {
                handler__.reclaimOutgoing(og__);
            }
        }
    }
}

namespace Gemma
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public sealed class LogDelD_ : Ice.ObjectDelD_, LogDel_
    {
        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void ClearAlarms(int[] IDS, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "ClearAlarms", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.ClearAlarms(IDS, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int GetAlarmCount(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetAlarmCount", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetAlarmCount(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetAlarms", Ice.OperationMode.Idempotent, context__);
            Gemma.AlarmMsg[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetAlarms(nIndex, nCount, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetCountOffline", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public int GetLastID(_System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetLastID", Ice.OperationMode.Idempotent, context__);
            int result__ = 0;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetLastID(current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetLog", Ice.OperationMode.Idempotent, context__);
            Gemma.LogMsg[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetLog(nID, nCount, Types, IDS, skey, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "GetLogOffline", Ice.OperationMode.Idempotent, context__);
            Gemma.LogMsg[] result__ = null;
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                result__ = servant__.GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
            return result__;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1031")]
        public void sendLog(Gemma.LogMsg[] data, _System.Collections.Generic.Dictionary<string, string> context__)
        {
            Ice.Current current__ = new Ice.Current();
            initCurrent__(ref current__, "sendLog", Ice.OperationMode.Idempotent, context__);
            IceInternal.Direct.RunDelegate run__ = delegate(Ice.Object obj__)
            {
                Log servant__ = null;
                try
                {
                    servant__ = (Log)obj__;
                }
                catch(_System.InvalidCastException)
                {
                    throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
                }
                servant__.sendLog(data, current__);
                return Ice.DispatchStatus.DispatchOK;
            };
            IceInternal.Direct direct__ = null;
            try
            {
                direct__ = new IceInternal.Direct(current__, run__);
                try
                {
                    Ice.DispatchStatus status__ = direct__.servant().collocDispatch__(direct__);
                    _System.Diagnostics.Debug.Assert(status__ == Ice.DispatchStatus.DispatchOK);
                }
                finally
                {
                    direct__.destroy();
                }
            }
            catch(Ice.SystemException)
            {
                throw;
            }
            catch(_System.Exception ex__)
            {
                IceInternal.LocalExceptionWrapper.throwWrapper(ex__);
            }
        }
    }
}

namespace Gemma
{
    [_System.Runtime.InteropServices.ComVisible(false)]
    [_System.CodeDom.Compiler.GeneratedCodeAttribute("slice2cs", "3.4.2")]
    public abstract class LogDisp_ : Ice.ObjectImpl, Log
    {
        #region Slice operations

        public void sendLog(Gemma.LogMsg[] data)
        {
            sendLog(data, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void sendLog(Gemma.LogMsg[] data, Ice.Current current__);

        public Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey)
        {
            return GetLog(nID, nCount, Types, IDS, skey, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract Gemma.LogMsg[] GetLog(int nID, int nCount, int[] Types, int[] IDS, string skey, Ice.Current current__);

        public int GetLastID()
        {
            return GetLastID(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetLastID(Ice.Current current__);

        public int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetCountOffline(long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.Current current__);

        public Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey)
        {
            return GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract Gemma.LogMsg[] GetLogOffline(int nIndex, int nCount, long llDateTimeEnd, long llDateTimeBegin, int[] Types, int[] IDS, string skey, Ice.Current current__);

        public int GetAlarmCount()
        {
            return GetAlarmCount(Ice.ObjectImpl.defaultCurrent);
        }

        public abstract int GetAlarmCount(Ice.Current current__);

        public Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount)
        {
            return GetAlarms(nIndex, nCount, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract Gemma.AlarmMsg[] GetAlarms(int nIndex, int nCount, Ice.Current current__);

        public void ClearAlarms(int[] IDS)
        {
            ClearAlarms(IDS, Ice.ObjectImpl.defaultCurrent);
        }

        public abstract void ClearAlarms(int[] IDS, Ice.Current current__);

        #endregion

        #region Slice type-related members

        public static new readonly string[] ids__ = 
        {
            "::Gemma::Log",
            "::Ice::Object"
        };

        public override bool ice_isA(string s)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override bool ice_isA(string s, Ice.Current current__)
        {
            return _System.Array.BinarySearch(ids__, s, IceUtilInternal.StringUtil.OrdinalStringComparer) >= 0;
        }

        public override string[] ice_ids()
        {
            return ids__;
        }

        public override string[] ice_ids(Ice.Current current__)
        {
            return ids__;
        }

        public override string ice_id()
        {
            return ids__[0];
        }

        public override string ice_id(Ice.Current current__)
        {
            return ids__[0];
        }

        public static new string ice_staticId()
        {
            return ids__[0];
        }

        #endregion

        #region Operation dispatch

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus sendLog___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            Gemma.LogMsg[] data;
            {
                int szx__ = is__.readAndCheckSeqSize(48);
                data = new Gemma.LogMsg[szx__];
                for(int ix__ = 0; ix__ < szx__; ++ix__)
                {
                    data[ix__] = new Gemma.LogMsg();
                    data[ix__].read__(is__);
                }
            }
            is__.endReadEncaps();
            obj__.sendLog(data, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetLog___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nID;
            nID = is__.readInt();
            int nCount;
            nCount = is__.readInt();
            int[] Types;
            Types = is__.readIntSeq();
            int[] IDS;
            IDS = is__.readIntSeq();
            string skey;
            skey = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            Gemma.LogMsg[] ret__ = obj__.GetLog(nID, nCount, Types, IDS, skey, current__);
            if(ret__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(ret__.Length);
                for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                {
                    (ret__[ix__] == null ? new Gemma.LogMsg() : ret__[ix__]).write__(os__);
                }
            }
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetLastID___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.GetLastID(current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetCountOffline___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            long llDateTimeEnd;
            llDateTimeEnd = is__.readLong();
            long llDateTimeBegin;
            llDateTimeBegin = is__.readLong();
            int[] Types;
            Types = is__.readIntSeq();
            int[] IDS;
            IDS = is__.readIntSeq();
            string skey;
            skey = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetLogOffline___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nIndex;
            nIndex = is__.readInt();
            int nCount;
            nCount = is__.readInt();
            long llDateTimeEnd;
            llDateTimeEnd = is__.readLong();
            long llDateTimeBegin;
            llDateTimeBegin = is__.readLong();
            int[] Types;
            Types = is__.readIntSeq();
            int[] IDS;
            IDS = is__.readIntSeq();
            string skey;
            skey = is__.readString();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            Gemma.LogMsg[] ret__ = obj__.GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, current__);
            if(ret__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(ret__.Length);
                for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                {
                    (ret__[ix__] == null ? new Gemma.LogMsg() : ret__[ix__]).write__(os__);
                }
            }
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetAlarmCount___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            inS__.istr().skipEmptyEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            int ret__ = obj__.GetAlarmCount(current__);
            os__.writeInt(ret__);
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus GetAlarms___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int nIndex;
            nIndex = is__.readInt();
            int nCount;
            nCount = is__.readInt();
            is__.endReadEncaps();
            IceInternal.BasicStream os__ = inS__.ostr();
            Gemma.AlarmMsg[] ret__ = obj__.GetAlarms(nIndex, nCount, current__);
            if(ret__ == null)
            {
                os__.writeSize(0);
            }
            else
            {
                os__.writeSize(ret__.Length);
                for(int ix__ = 0; ix__ < ret__.Length; ++ix__)
                {
                    (ret__[ix__] == null ? new Gemma.AlarmMsg() : ret__[ix__]).write__(os__);
                }
            }
            return Ice.DispatchStatus.DispatchOK;
        }

        [_System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
        public static Ice.DispatchStatus ClearAlarms___(Log obj__, IceInternal.Incoming inS__, Ice.Current current__)
        {
            checkMode__(Ice.OperationMode.Idempotent, current__.mode);
            IceInternal.BasicStream is__ = inS__.istr();
            is__.startReadEncaps();
            int[] IDS;
            IDS = is__.readIntSeq();
            is__.endReadEncaps();
            obj__.ClearAlarms(IDS, current__);
            return Ice.DispatchStatus.DispatchOK;
        }

        private static string[] all__ =
        {
            "ClearAlarms",
            "GetAlarmCount",
            "GetAlarms",
            "GetCountOffline",
            "GetLastID",
            "GetLog",
            "GetLogOffline",
            "ice_id",
            "ice_ids",
            "ice_isA",
            "ice_ping",
            "sendLog"
        };

        public override Ice.DispatchStatus dispatch__(IceInternal.Incoming inS__, Ice.Current current__)
        {
            int pos = _System.Array.BinarySearch(all__, current__.operation, IceUtilInternal.StringUtil.OrdinalStringComparer);
            if(pos < 0)
            {
                throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
            }

            switch(pos)
            {
                case 0:
                {
                    return ClearAlarms___(this, inS__, current__);
                }
                case 1:
                {
                    return GetAlarmCount___(this, inS__, current__);
                }
                case 2:
                {
                    return GetAlarms___(this, inS__, current__);
                }
                case 3:
                {
                    return GetCountOffline___(this, inS__, current__);
                }
                case 4:
                {
                    return GetLastID___(this, inS__, current__);
                }
                case 5:
                {
                    return GetLog___(this, inS__, current__);
                }
                case 6:
                {
                    return GetLogOffline___(this, inS__, current__);
                }
                case 7:
                {
                    return ice_id___(this, inS__, current__);
                }
                case 8:
                {
                    return ice_ids___(this, inS__, current__);
                }
                case 9:
                {
                    return ice_isA___(this, inS__, current__);
                }
                case 10:
                {
                    return ice_ping___(this, inS__, current__);
                }
                case 11:
                {
                    return sendLog___(this, inS__, current__);
                }
            }

            _System.Diagnostics.Debug.Assert(false);
            throw new Ice.OperationNotExistException(current__.id, current__.facet, current__.operation);
        }

        #endregion

        #region Marshaling support

        public override void write__(IceInternal.BasicStream os__)
        {
            os__.writeTypeId(ice_staticId());
            os__.startWriteSlice();
            os__.endWriteSlice();
            base.write__(os__);
        }

        public override void read__(IceInternal.BasicStream is__, bool rid__)
        {
            if(rid__)
            {
                /* string myId = */ is__.readTypeId();
            }
            is__.startReadSlice();
            is__.endReadSlice();
            base.read__(is__, true);
        }

        public override void write__(Ice.OutputStream outS__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Gemma::Log was not generated with stream support";
            throw ex;
        }

        public override void read__(Ice.InputStream inS__, bool rid__)
        {
            Ice.MarshalException ex = new Ice.MarshalException();
            ex.reason = "type Gemma::Log was not generated with stream support";
            throw ex;
        }

        #endregion
    }
}
