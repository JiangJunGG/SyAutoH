// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iGuiHub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef _____common_iGuiHub_h__
#define _____common_iGuiHub_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/IncomingAsync.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <iconstDef.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace MCS
{

class GuiDataUpdater;

class GuiDataHub;

class UserManagement;

}

}

namespace MCS
{

class GuiDataUpdater;
bool operator==(const GuiDataUpdater&, const GuiDataUpdater&);
bool operator<(const GuiDataUpdater&, const GuiDataUpdater&);

class GuiDataHub;
bool operator==(const GuiDataHub&, const GuiDataHub&);
bool operator<(const GuiDataHub&, const GuiDataHub&);

class UserManagement;
bool operator==(const UserManagement&, const UserManagement&);
bool operator<(const UserManagement&, const UserManagement&);

}

namespace IceInternal
{

::Ice::Object* upCast(::MCS::GuiDataUpdater*);
::IceProxy::Ice::Object* upCast(::IceProxy::MCS::GuiDataUpdater*);

::Ice::Object* upCast(::MCS::GuiDataHub*);
::IceProxy::Ice::Object* upCast(::IceProxy::MCS::GuiDataHub*);

::Ice::Object* upCast(::MCS::UserManagement*);
::IceProxy::Ice::Object* upCast(::IceProxy::MCS::UserManagement*);

}

namespace MCS
{

typedef ::IceInternal::Handle< ::MCS::GuiDataUpdater> GuiDataUpdaterPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MCS::GuiDataUpdater> GuiDataUpdaterPrx;

void __read(::IceInternal::BasicStream*, GuiDataUpdaterPrx&);
void __patch__GuiDataUpdaterPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::MCS::GuiDataHub> GuiDataHubPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MCS::GuiDataHub> GuiDataHubPrx;

void __read(::IceInternal::BasicStream*, GuiDataHubPrx&);
void __patch__GuiDataHubPtr(void*, ::Ice::ObjectPtr&);

typedef ::IceInternal::Handle< ::MCS::UserManagement> UserManagementPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::MCS::UserManagement> UserManagementPrx;

void __read(::IceInternal::BasicStream*, UserManagementPrx&);
void __patch__UserManagementPtr(void*, ::Ice::ObjectPtr&);

}

namespace MCS
{

struct GuiDataItem
{
    ::MCS::GuiHub::PushData enumTag;
    ::std::string sVal;

    bool operator==(const GuiDataItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(enumTag != __rhs.enumTag)
        {
            return false;
        }
        if(sVal != __rhs.sVal)
        {
            return false;
        }
        return true;
    }

    bool operator<(const GuiDataItem& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(enumTag < __rhs.enumTag)
        {
            return true;
        }
        else if(__rhs.enumTag < enumTag)
        {
            return false;
        }
        if(sVal < __rhs.sVal)
        {
            return true;
        }
        else if(__rhs.sVal < sVal)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const GuiDataItem& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const GuiDataItem& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const GuiDataItem& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const GuiDataItem& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct User
{
    ::Ice::Int nID;
    ::std::string sName;
    ::Ice::Int nRight;

    bool operator==(const User& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(nID != __rhs.nID)
        {
            return false;
        }
        if(sName != __rhs.sName)
        {
            return false;
        }
        if(nRight != __rhs.nRight)
        {
            return false;
        }
        return true;
    }

    bool operator<(const User& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(nID < __rhs.nID)
        {
            return true;
        }
        else if(__rhs.nID < nID)
        {
            return false;
        }
        if(sName < __rhs.sName)
        {
            return true;
        }
        else if(__rhs.sName < sName)
        {
            return false;
        }
        if(nRight < __rhs.nRight)
        {
            return true;
        }
        else if(__rhs.nRight < nRight)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const User& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const User& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const User& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const User& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::MCS::User> UserList;
void __writeUserList(::IceInternal::BasicStream*, const ::MCS::User*, const ::MCS::User*);
void __readUserList(::IceInternal::BasicStream*, UserList&);

}

namespace MCS
{

class AMI_GuiDataUpdater_UpdateData : public ::Ice::AMICallbackBase
{
public:

    virtual void ice_response() = 0;

    void __response()
    {
        ice_response();
    }
    void __exception(const ::Ice::Exception& ex)
    {
        ice_exception(ex);
    }
    void __sent(bool sentSynchronously)
    {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        AMICallbackBase::__sent(sentSynchronously);
#else
        ::Ice::AMICallbackBase::__sent(sentSynchronously);
#endif
    }
};

typedef ::IceUtil::Handle< ::MCS::AMI_GuiDataUpdater_UpdateData> AMI_GuiDataUpdater_UpdateDataPtr;

class AMD_GuiDataUpdater_UpdateData : virtual public ::Ice::AMDCallback
{
public:

    virtual void ice_response() = 0;
};

typedef ::IceUtil::Handle< ::MCS::AMD_GuiDataUpdater_UpdateData> AMD_GuiDataUpdater_UpdateDataPtr;

}

namespace IceAsync
{

namespace MCS
{

class AMD_GuiDataUpdater_UpdateData : public ::MCS::AMD_GuiDataUpdater_UpdateData, public ::IceInternal::IncomingAsync
{
public:

    AMD_GuiDataUpdater_UpdateData(::IceInternal::Incoming&);

    virtual void ice_response();
};

}

}

namespace MCS
{

class Callback_GuiDataUpdater_UpdateData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataUpdater_UpdateData_Base> Callback_GuiDataUpdater_UpdateDataPtr;

class Callback_GuiDataHub_SetPushCmd_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_SetPushCmd_Base> Callback_GuiDataHub_SetPushCmdPtr;

class Callback_GuiDataHub_SetPushTimer_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_SetPushTimer_Base> Callback_GuiDataHub_SetPushTimerPtr;

class Callback_GuiDataHub_ReadData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_ReadData_Base> Callback_GuiDataHub_ReadDataPtr;

class Callback_GuiDataHub_WriteData_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_WriteData_Base> Callback_GuiDataHub_WriteDataPtr;

class Callback_GuiDataHub_SetDataUpdater_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_SetDataUpdater_Base> Callback_GuiDataHub_SetDataUpdaterPtr;

class Callback_GuiDataHub_EraseDataUpdater_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_GuiDataHub_EraseDataUpdater_Base> Callback_GuiDataHub_EraseDataUpdaterPtr;

class Callback_UserManagement_Login_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_Login_Base> Callback_UserManagement_LoginPtr;

class Callback_UserManagement_Logout_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_Logout_Base> Callback_UserManagement_LogoutPtr;

class Callback_UserManagement_CreateUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_CreateUser_Base> Callback_UserManagement_CreateUserPtr;

class Callback_UserManagement_SetUserPW_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_SetUserPW_Base> Callback_UserManagement_SetUserPWPtr;

class Callback_UserManagement_SetUserRight_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_SetUserRight_Base> Callback_UserManagement_SetUserRightPtr;

class Callback_UserManagement_DeleteUser_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_DeleteUser_Base> Callback_UserManagement_DeleteUserPtr;

class Callback_UserManagement_GetUserCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_GetUserCount_Base> Callback_UserManagement_GetUserCountPtr;

class Callback_UserManagement_GetUserList_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_UserManagement_GetUserList_Base> Callback_UserManagement_GetUserListPtr;

}

namespace IceProxy
{

namespace MCS
{

class GuiDataUpdater : virtual public ::IceProxy::Ice::Object
{
public:

    void UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data)
    {
        UpdateData(time, data, 0);
    }
    void UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context& __ctx)
    {
        UpdateData(time, data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data)
    {
        return begin_UpdateData(time, data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context& __ctx)
    {
        return begin_UpdateData(time, data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateData(time, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateData(time, data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::MCS::Callback_GuiDataUpdater_UpdateDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateData(time, data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataUpdater_UpdateDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_UpdateData(time, data, &__ctx, __del, __cookie);
    }

    void end_UpdateData(const ::Ice::AsyncResultPtr&);
    
private:

    void UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    bool UpdateData_async(const ::MCS::AMI_GuiDataUpdater_UpdateDataPtr&, ::Ice::Long, const ::MCS::GuiDataItem&);
    bool UpdateData_async(const ::MCS::AMI_GuiDataUpdater_UpdateDataPtr&, ::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context&);
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataUpdater> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataUpdater*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<GuiDataUpdater*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class GuiDataHub : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session)
    {
        return SetPushCmd(updater, list, session, 0);
    }
    ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return SetPushCmd(updater, list, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session)
    {
        return begin_SetPushCmd(updater, list, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_SetPushCmd(updater, list, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushCmd(updater, list, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushCmd(updater, list, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::MCS::Callback_GuiDataHub_SetPushCmdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushCmd(updater, list, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_SetPushCmdPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushCmd(updater, list, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetPushCmd(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetPushTimer(::Ice::Int period, ::Ice::Int session)
    {
        return SetPushTimer(period, session, 0);
    }
    ::Ice::Int SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return SetPushTimer(period, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session)
    {
        return begin_SetPushTimer(period, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_SetPushTimer(period, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushTimer(period, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushTimer(period, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::MCS::Callback_GuiDataHub_SetPushTimerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushTimer(period, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_SetPushTimerPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetPushTimer(period, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetPushTimer(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::std::string ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session)
    {
        return ReadData(Tag, session, 0);
    }
    ::std::string ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return ReadData(Tag, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session)
    {
        return begin_ReadData(Tag, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_ReadData(Tag, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(Tag, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(Tag, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::MCS::Callback_GuiDataHub_ReadDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(Tag, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_ReadDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ReadData(Tag, session, &__ctx, __del, __cookie);
    }

    ::std::string end_ReadData(const ::Ice::AsyncResultPtr&);
    
private:

    ::std::string ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session)
    {
        return WriteData(Tag, Val, session, 0);
    }
    ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return WriteData(Tag, Val, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session)
    {
        return begin_WriteData(Tag, Val, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_WriteData(Tag, Val, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteData(Tag, Val, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteData(Tag, Val, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::MCS::Callback_GuiDataHub_WriteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteData(Tag, Val, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_WriteDataPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_WriteData(Tag, Val, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_WriteData(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater)
    {
        SetDataUpdater(updater, 0);
    }
    void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx)
    {
        SetDataUpdater(updater, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater)
    {
        return begin_SetDataUpdater(updater, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx)
    {
        return begin_SetDataUpdater(updater, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDataUpdater(updater, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDataUpdater(updater, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::Callback_GuiDataHub_SetDataUpdaterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDataUpdater(updater, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_SetDataUpdaterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetDataUpdater(updater, &__ctx, __del, __cookie);
    }

    void end_SetDataUpdater(const ::Ice::AsyncResultPtr&);
    
private:

    void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater)
    {
        EraseDataUpdater(updater, 0);
    }
    void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx)
    {
        EraseDataUpdater(updater, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater)
    {
        return begin_EraseDataUpdater(updater, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx)
    {
        return begin_EraseDataUpdater(updater, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EraseDataUpdater(updater, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EraseDataUpdater(updater, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::Callback_GuiDataHub_EraseDataUpdaterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EraseDataUpdater(updater, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context& __ctx, const ::MCS::Callback_GuiDataHub_EraseDataUpdaterPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_EraseDataUpdater(updater, &__ctx, __del, __cookie);
    }

    void end_EraseDataUpdater(const ::Ice::AsyncResultPtr&);
    
private:

    void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<GuiDataHub> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<GuiDataHub*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<GuiDataHub*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

class UserManagement : virtual public ::IceProxy::Ice::Object
{
public:

    ::Ice::Int Login(const ::std::string& user, const ::std::string& pass)
    {
        return Login(user, pass, 0);
    }
    ::Ice::Int Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context& __ctx)
    {
        return Login(user, pass, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass)
    {
        return begin_Login(user, pass, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context& __ctx)
    {
        return begin_Login(user, pass, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Login(user, pass, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Login(user, pass, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass, const ::MCS::Callback_UserManagement_LoginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Login(user, pass, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_LoginPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Login(user, pass, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_Login(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int Login(const ::std::string&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Login(const ::std::string&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int Logout(::Ice::Int session)
    {
        return Logout(session, 0);
    }
    ::Ice::Int Logout(::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return Logout(session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session)
    {
        return begin_Logout(session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_Logout(session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Logout(session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Logout(session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session, const ::MCS::Callback_UserManagement_LogoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Logout(session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_LogoutPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_Logout(session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_Logout(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int Logout(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_Logout(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session)
    {
        return CreateUser(user, pass, nRight, session, 0);
    }
    ::Ice::Int CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return CreateUser(user, pass, nRight, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session)
    {
        return begin_CreateUser(user, pass, nRight, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_CreateUser(user, pass, nRight, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateUser(user, pass, nRight, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateUser(user, pass, nRight, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::MCS::Callback_UserManagement_CreateUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateUser(user, pass, nRight, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_CreateUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_CreateUser(user, pass, nRight, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_CreateUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session)
    {
        return SetUserPW(nUID, pass, session, 0);
    }
    ::Ice::Int SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return SetUserPW(nUID, pass, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session)
    {
        return begin_SetUserPW(nUID, pass, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_SetUserPW(nUID, pass, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserPW(nUID, pass, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserPW(nUID, pass, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::MCS::Callback_UserManagement_SetUserPWPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserPW(nUID, pass, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_SetUserPWPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserPW(nUID, pass, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetUserPW(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session)
    {
        return SetUserRight(nUID, nRight, session, 0);
    }
    ::Ice::Int SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return SetUserRight(nUID, nRight, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session)
    {
        return begin_SetUserRight(nUID, nRight, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_SetUserRight(nUID, nRight, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserRight(nUID, nRight, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserRight(nUID, nRight, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::MCS::Callback_UserManagement_SetUserRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserRight(nUID, nRight, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_SetUserRightPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_SetUserRight(nUID, nRight, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_SetUserRight(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int DeleteUser(::Ice::Int nUID, ::Ice::Int session)
    {
        return DeleteUser(nUID, session, 0);
    }
    ::Ice::Int DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return DeleteUser(nUID, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session)
    {
        return begin_DeleteUser(nUID, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_DeleteUser(nUID, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteUser(nUID, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteUser(nUID, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::MCS::Callback_UserManagement_DeleteUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteUser(nUID, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_DeleteUserPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_DeleteUser(nUID, session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_DeleteUser(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetUserCount(::Ice::Int session)
    {
        return GetUserCount(session, 0);
    }
    ::Ice::Int GetUserCount(::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return GetUserCount(session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session)
    {
        return begin_GetUserCount(session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_GetUserCount(session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserCount(session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserCount(session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session, const ::MCS::Callback_UserManagement_GetUserCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserCount(session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_GetUserCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserCount(session, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetUserCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetUserCount(::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetUserCount(::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::MCS::UserList GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session)
    {
        return GetUserList(nBegin, nCount, session, 0);
    }
    ::MCS::UserList GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return GetUserList(nBegin, nCount, session, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session)
    {
        return begin_GetUserList(nBegin, nCount, session, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context& __ctx)
    {
        return begin_GetUserList(nBegin, nCount, session, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserList(nBegin, nCount, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserList(nBegin, nCount, session, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::MCS::Callback_UserManagement_GetUserListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserList(nBegin, nCount, session, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context& __ctx, const ::MCS::Callback_UserManagement_GetUserListPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetUserList(nBegin, nCount, session, &__ctx, __del, __cookie);
    }

    ::MCS::UserList end_GetUserList(const ::Ice::AsyncResultPtr&);
    
private:

    ::MCS::UserList GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<UserManagement> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<UserManagement> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<UserManagement*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<UserManagement*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace MCS
{

class GuiDataUpdater : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*) = 0;
};

class GuiDataHub : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::std::string ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*) = 0;

    virtual void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*) = 0;
};

class UserManagement : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual ::Ice::Int Login(const ::std::string&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int Logout(::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::Ice::Int GetUserCount(::Ice::Int, const ::Ice::Context*) = 0;

    virtual ::MCS::UserList GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace MCS
{

class GuiDataUpdater : virtual public ::IceDelegate::MCS::GuiDataUpdater,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*);
};

class GuiDataHub : virtual public ::IceDelegate::MCS::GuiDataHub,
                   virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::std::string ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);

    virtual void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);
};

class UserManagement : virtual public ::IceDelegate::MCS::UserManagement,
                       virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual ::Ice::Int Login(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int Logout(::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int GetUserCount(::Ice::Int, const ::Ice::Context*);

    virtual ::MCS::UserList GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace MCS
{

class GuiDataUpdater : virtual public ::IceDelegate::MCS::GuiDataUpdater,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*);
};

class GuiDataHub : virtual public ::IceDelegate::MCS::GuiDataHub,
                   virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::std::string ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);

    virtual void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Context*);
};

class UserManagement : virtual public ::IceDelegate::MCS::UserManagement,
                       virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual ::Ice::Int Login(const ::std::string&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int Logout(::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual ::Ice::Int GetUserCount(::Ice::Int, const ::Ice::Context*);

    virtual ::MCS::UserList GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Context*);
};

}

}

namespace MCS
{

class GuiDataUpdater : virtual public ::Ice::Object
{
public:

    typedef GuiDataUpdaterPrx ProxyType;
    typedef GuiDataUpdaterPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void UpdateData_async(const ::MCS::AMD_GuiDataUpdater_UpdateDataPtr&, ::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___UpdateData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const GuiDataUpdater& l, const GuiDataUpdater& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GuiDataUpdater& l, const GuiDataUpdater& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class GuiDataHub : virtual public ::Ice::Object
{
public:

    typedef GuiDataHubPrx ProxyType;
    typedef GuiDataHubPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int SetPushCmd(const ::MCS::GuiDataUpdaterPrx&, const ::MCS::GuiHub::GuiPushDataList&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetPushCmd(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetPushTimer(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetPushTimer(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::std::string ReadData(::MCS::GuiHub::GuiCommand, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ReadData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int WriteData(::MCS::GuiHub::GuiCommand, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___WriteData(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void SetDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetDataUpdater(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___EraseDataUpdater(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const GuiDataHub& l, const GuiDataHub& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const GuiDataHub& l, const GuiDataHub& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

class UserManagement : virtual public ::Ice::Object
{
public:

    typedef UserManagementPrx ProxyType;
    typedef UserManagementPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual ::Ice::Int Login(const ::std::string&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Login(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int Logout(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___Logout(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int CreateUser(const ::std::string&, const ::std::string&, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___CreateUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetUserPW(::Ice::Int, const ::std::string&, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetUserPW(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int SetUserRight(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___SetUserRight(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int DeleteUser(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___DeleteUser(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetUserCount(::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetUserCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::MCS::UserList GetUserList(::Ice::Int, ::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetUserList(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const UserManagement& l, const UserManagement& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const UserManagement& l, const UserManagement& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace MCS
{

template<class T>
class CallbackNC_GuiDataUpdater_UpdateData : public Callback_GuiDataUpdater_UpdateData_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GuiDataUpdater_UpdateData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataUpdater_UpdateData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataUpdater_UpdateData<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataUpdater_UpdateData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataUpdater_UpdateData<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataUpdater_UpdateData : public Callback_GuiDataUpdater_UpdateData_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GuiDataUpdater_UpdateData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataUpdater_UpdateData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataUpdater_UpdateData<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataUpdater_UpdateData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataUpdater_UpdateDataPtr
newCallback_GuiDataUpdater_UpdateData(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataUpdater_UpdateData<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_SetPushCmd : public Callback_GuiDataHub_SetPushCmd_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_GuiDataHub_SetPushCmd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetPushCmd(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GuiDataHub_SetPushCmdPtr
newCallback_GuiDataHub_SetPushCmd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetPushCmd<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_SetPushCmdPtr
newCallback_GuiDataHub_SetPushCmd(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetPushCmd<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_SetPushCmd : public Callback_GuiDataHub_SetPushCmd_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_GuiDataHub_SetPushCmd(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetPushCmd(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GuiDataHub_SetPushCmdPtr
newCallback_GuiDataHub_SetPushCmd(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetPushCmd<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_SetPushCmdPtr
newCallback_GuiDataHub_SetPushCmd(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetPushCmd<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_SetPushTimer : public Callback_GuiDataHub_SetPushTimer_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_GuiDataHub_SetPushTimer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetPushTimer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GuiDataHub_SetPushTimerPtr
newCallback_GuiDataHub_SetPushTimer(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetPushTimer<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_SetPushTimerPtr
newCallback_GuiDataHub_SetPushTimer(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetPushTimer<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_SetPushTimer : public Callback_GuiDataHub_SetPushTimer_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_GuiDataHub_SetPushTimer(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetPushTimer(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GuiDataHub_SetPushTimerPtr
newCallback_GuiDataHub_SetPushTimer(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetPushTimer<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_SetPushTimerPtr
newCallback_GuiDataHub_SetPushTimer(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetPushTimer<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_ReadData : public Callback_GuiDataHub_ReadData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::std::string&);

    CallbackNC_GuiDataHub_ReadData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_ReadData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GuiDataHub_ReadDataPtr
newCallback_GuiDataHub_ReadData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_ReadData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_ReadDataPtr
newCallback_GuiDataHub_ReadData(T* instance, void (T::*cb)(const ::std::string&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_ReadData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_ReadData : public Callback_GuiDataHub_ReadData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::std::string&, const CT&);

    Callback_GuiDataHub_ReadData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::std::string __ret;
        try
        {
            __ret = __proxy->end_ReadData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GuiDataHub_ReadDataPtr
newCallback_GuiDataHub_ReadData(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_ReadData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_ReadDataPtr
newCallback_GuiDataHub_ReadData(T* instance, void (T::*cb)(const ::std::string&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_ReadData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_WriteData : public Callback_GuiDataHub_WriteData_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_GuiDataHub_WriteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_GuiDataHub_WriteDataPtr
newCallback_GuiDataHub_WriteData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_WriteData<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_WriteDataPtr
newCallback_GuiDataHub_WriteData(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_WriteData<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_WriteData : public Callback_GuiDataHub_WriteData_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_GuiDataHub_WriteData(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::GuiDataHubPrx __proxy = ::MCS::GuiDataHubPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_WriteData(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_GuiDataHub_WriteDataPtr
newCallback_GuiDataHub_WriteData(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_WriteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_WriteDataPtr
newCallback_GuiDataHub_WriteData(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_WriteData<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_SetDataUpdater : public Callback_GuiDataHub_SetDataUpdater_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GuiDataHub_SetDataUpdater(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetDataUpdater<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetDataUpdater<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetDataUpdater<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_SetDataUpdater<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_SetDataUpdater : public Callback_GuiDataHub_SetDataUpdater_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GuiDataHub_SetDataUpdater(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetDataUpdater<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetDataUpdater<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetDataUpdater<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_SetDataUpdaterPtr
newCallback_GuiDataHub_SetDataUpdater(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_SetDataUpdater<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_GuiDataHub_EraseDataUpdater : public Callback_GuiDataHub_EraseDataUpdater_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_GuiDataHub_EraseDataUpdater(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_EraseDataUpdater<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_EraseDataUpdater<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_EraseDataUpdater<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_GuiDataHub_EraseDataUpdater<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_GuiDataHub_EraseDataUpdater : public Callback_GuiDataHub_EraseDataUpdater_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_GuiDataHub_EraseDataUpdater(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_EraseDataUpdater<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_EraseDataUpdater<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_EraseDataUpdater<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_GuiDataHub_EraseDataUpdaterPtr
newCallback_GuiDataHub_EraseDataUpdater(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_GuiDataHub_EraseDataUpdater<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_Login : public Callback_UserManagement_Login_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_Login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_LoginPtr
newCallback_UserManagement_Login(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_Login<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_LoginPtr
newCallback_UserManagement_Login(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_Login<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_Login : public Callback_UserManagement_Login_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_Login(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Login(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_LoginPtr
newCallback_UserManagement_Login(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_Login<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_LoginPtr
newCallback_UserManagement_Login(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_Login<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_Logout : public Callback_UserManagement_Logout_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_Logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_LogoutPtr
newCallback_UserManagement_Logout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_Logout<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_LogoutPtr
newCallback_UserManagement_Logout(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_Logout<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_Logout : public Callback_UserManagement_Logout_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_Logout(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_Logout(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_LogoutPtr
newCallback_UserManagement_Logout(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_Logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_LogoutPtr
newCallback_UserManagement_Logout(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_Logout<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_CreateUser : public Callback_UserManagement_CreateUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_CreateUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CreateUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_CreateUserPtr
newCallback_UserManagement_CreateUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_CreateUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_CreateUserPtr
newCallback_UserManagement_CreateUser(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_CreateUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_CreateUser : public Callback_UserManagement_CreateUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_CreateUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_CreateUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_CreateUserPtr
newCallback_UserManagement_CreateUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_CreateUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_CreateUserPtr
newCallback_UserManagement_CreateUser(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_CreateUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_SetUserPW : public Callback_UserManagement_SetUserPW_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_SetUserPW(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetUserPW(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_SetUserPWPtr
newCallback_UserManagement_SetUserPW(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_SetUserPW<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_SetUserPWPtr
newCallback_UserManagement_SetUserPW(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_SetUserPW<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_SetUserPW : public Callback_UserManagement_SetUserPW_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_SetUserPW(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetUserPW(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_SetUserPWPtr
newCallback_UserManagement_SetUserPW(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_SetUserPW<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_SetUserPWPtr
newCallback_UserManagement_SetUserPW(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_SetUserPW<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_SetUserRight : public Callback_UserManagement_SetUserRight_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_SetUserRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetUserRight(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_SetUserRightPtr
newCallback_UserManagement_SetUserRight(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_SetUserRight<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_SetUserRightPtr
newCallback_UserManagement_SetUserRight(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_SetUserRight<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_SetUserRight : public Callback_UserManagement_SetUserRight_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_SetUserRight(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_SetUserRight(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_SetUserRightPtr
newCallback_UserManagement_SetUserRight(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_SetUserRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_SetUserRightPtr
newCallback_UserManagement_SetUserRight(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_SetUserRight<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_DeleteUser : public Callback_UserManagement_DeleteUser_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_DeleteUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DeleteUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_DeleteUserPtr
newCallback_UserManagement_DeleteUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_DeleteUser<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_DeleteUserPtr
newCallback_UserManagement_DeleteUser(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_DeleteUser<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_DeleteUser : public Callback_UserManagement_DeleteUser_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_DeleteUser(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_DeleteUser(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_DeleteUserPtr
newCallback_UserManagement_DeleteUser(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_DeleteUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_DeleteUserPtr
newCallback_UserManagement_DeleteUser(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_DeleteUser<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_GetUserCount : public Callback_UserManagement_GetUserCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_UserManagement_GetUserCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetUserCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_GetUserCountPtr
newCallback_UserManagement_GetUserCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_GetUserCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_GetUserCountPtr
newCallback_UserManagement_GetUserCount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_GetUserCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_GetUserCount : public Callback_UserManagement_GetUserCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_UserManagement_GetUserCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetUserCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_GetUserCountPtr
newCallback_UserManagement_GetUserCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_GetUserCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_GetUserCountPtr
newCallback_UserManagement_GetUserCount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_GetUserCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_UserManagement_GetUserList : public Callback_UserManagement_GetUserList_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::MCS::UserList&);

    CallbackNC_UserManagement_GetUserList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::MCS::UserList __ret;
        try
        {
            __ret = __proxy->end_GetUserList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_UserManagement_GetUserListPtr
newCallback_UserManagement_GetUserList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::MCS::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_GetUserList<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_UserManagement_GetUserListPtr
newCallback_UserManagement_GetUserList(T* instance, void (T::*cb)(const ::MCS::UserList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_UserManagement_GetUserList<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_UserManagement_GetUserList : public Callback_UserManagement_GetUserList_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::MCS::UserList&, const CT&);

    Callback_UserManagement_GetUserList(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::MCS::UserManagementPrx __proxy = ::MCS::UserManagementPrx::uncheckedCast(__result->getProxy());
        ::MCS::UserList __ret;
        try
        {
            __ret = __proxy->end_GetUserList(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_UserManagement_GetUserListPtr
newCallback_UserManagement_GetUserList(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::MCS::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_GetUserList<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_UserManagement_GetUserListPtr
newCallback_UserManagement_GetUserList(T* instance, void (T::*cb)(const ::MCS::UserList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_UserManagement_GetUserList<T, CT>(instance, cb, excb, sentcb);
}

}

#endif
