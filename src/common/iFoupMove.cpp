// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iFoupMove.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <stdafx.h>
#include <iFoupMove.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __MCS__FoupMove__Move_name = "Move";

::Ice::Object* IceInternal::upCast(::MCS::FoupMove* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::MCS::FoupMove* p) { return p; }

void
MCS::__read(::IceInternal::BasicStream* __is, ::MCS::FoupMovePrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MCS::FoupMove;
        v->__copyFrom(proxy);
    }
}

::Ice::Int
IceProxy::MCS::FoupMove::Move(::Ice::Int FoupID, ::Ice::Int From, ::Ice::Int To, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__FoupMove__Move_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::FoupMove* __del = dynamic_cast< ::IceDelegate::MCS::FoupMove*>(__delBase.get());
            return __del->Move(FoupID, From, To, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::FoupMove::begin_Move(::Ice::Int FoupID, ::Ice::Int From, ::Ice::Int To, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__FoupMove__Move_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__FoupMove__Move_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__FoupMove__Move_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(FoupID);
        __os->write(From);
        __os->write(To);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::FoupMove::end_Move(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__FoupMove__Move_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::MCS::FoupMove::ice_staticId()
{
    return ::MCS::FoupMove::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::MCS::FoupMove::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::MCS::FoupMove);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::MCS::FoupMove::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::MCS::FoupMove);
}

::IceProxy::Ice::Object*
IceProxy::MCS::FoupMove::__newInstance() const
{
    return new FoupMove;
}

::Ice::Int
IceDelegateM::MCS::FoupMove::Move(::Ice::Int FoupID, ::Ice::Int From, ::Ice::Int To, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__FoupMove__Move_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(FoupID);
        __os->write(From);
        __os->write(To);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateD::MCS::FoupMove::Move(::Ice::Int FoupID, ::Ice::Int From, ::Ice::Int To, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int FoupID, ::Ice::Int From, ::Ice::Int To, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_FoupID(FoupID),
            _m_From(From),
            _m_To(To)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::FoupMove* servant = dynamic_cast< ::MCS::FoupMove*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->Move(_m_FoupID, _m_From, _m_To, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_FoupID;
        ::Ice::Int _m_From;
        ::Ice::Int _m_To;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__FoupMove__Move_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, FoupID, From, To, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
MCS::FoupMove::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __MCS__FoupMove_ids[2] =
{
    "::Ice::Object",
    "::MCS::FoupMove"
};

bool
MCS::FoupMove::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MCS__FoupMove_ids, __MCS__FoupMove_ids + 2, _s);
}

::std::vector< ::std::string>
MCS::FoupMove::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MCS__FoupMove_ids[0], &__MCS__FoupMove_ids[2]);
}

const ::std::string&
MCS::FoupMove::ice_id(const ::Ice::Current&) const
{
    return __MCS__FoupMove_ids[1];
}

const ::std::string&
MCS::FoupMove::ice_staticId()
{
    return __MCS__FoupMove_ids[1];
}

::Ice::DispatchStatus
MCS::FoupMove::___Move(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int FoupID;
    ::Ice::Int From;
    ::Ice::Int To;
    __is->read(FoupID);
    __is->read(From);
    __is->read(To);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = Move(FoupID, From, To, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

static ::std::string __MCS__FoupMove_all[] =
{
    "Move",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
MCS::FoupMove::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__MCS__FoupMove_all, __MCS__FoupMove_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MCS__FoupMove_all)
    {
        case 0:
        {
            return ___Move(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MCS::FoupMove::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
MCS::FoupMove::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
MCS::FoupMove::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::FoupMove was not generated with stream support";
    throw ex;
}

void
MCS::FoupMove::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::FoupMove was not generated with stream support";
    throw ex;
}
#endif

void 
MCS::__patch__FoupMovePtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::MCS::FoupMovePtr* p = static_cast< ::MCS::FoupMovePtr*>(__addr);
    assert(p);
    *p = ::MCS::FoupMovePtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::MCS::FoupMove::ice_staticId(), v->ice_id());
    }
}
