// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iLog.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#ifndef _____common_iLog_h__
#define _____common_iLog_h__

#include <Ice/LocalObjectF.h>
#include <Ice/ProxyF.h>
#include <Ice/ObjectF.h>
#include <Ice/Exception.h>
#include <Ice/LocalObject.h>
#include <Ice/Proxy.h>
#include <Ice/Object.h>
#include <Ice/Outgoing.h>
#include <Ice/OutgoingAsync.h>
#include <Ice/Incoming.h>
#include <Ice/Direct.h>
#include <IceUtil/ScopedArray.h>
#include <Ice/StreamF.h>
#include <Ice/UndefSysMacros.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

namespace IceProxy
{

namespace Gemma
{

class Log;

}

}

namespace Gemma
{

class Log;
bool operator==(const Log&, const Log&);
bool operator<(const Log&, const Log&);

}

namespace IceInternal
{

::Ice::Object* upCast(::Gemma::Log*);
::IceProxy::Ice::Object* upCast(::IceProxy::Gemma::Log*);

}

namespace Gemma
{

typedef ::IceInternal::Handle< ::Gemma::Log> LogPtr;
typedef ::IceInternal::ProxyHandle< ::IceProxy::Gemma::Log> LogPrx;

void __read(::IceInternal::BasicStream*, LogPrx&);
void __patch__LogPtr(void*, ::Ice::ObjectPtr&);

}

namespace Gemma
{

struct LogMsg
{
    ::Ice::Int nID;
    ::Ice::Int nEventID;
    ::Ice::Long lTime;
    ::Ice::Int nParam1;
    ::Ice::Int nParam2;
    ::Ice::Double dParam1;
    ::Ice::Double dParam2;
    ::std::string strUnit;
    ::std::string strMsg;
    ::std::string strUser;
    ::Ice::Short nUnit;
    ::Ice::Short nType;
    bool bCleared;

    bool operator==(const LogMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(nID != __rhs.nID)
        {
            return false;
        }
        if(nEventID != __rhs.nEventID)
        {
            return false;
        }
        if(lTime != __rhs.lTime)
        {
            return false;
        }
        if(nParam1 != __rhs.nParam1)
        {
            return false;
        }
        if(nParam2 != __rhs.nParam2)
        {
            return false;
        }
        if(dParam1 != __rhs.dParam1)
        {
            return false;
        }
        if(dParam2 != __rhs.dParam2)
        {
            return false;
        }
        if(strUnit != __rhs.strUnit)
        {
            return false;
        }
        if(strMsg != __rhs.strMsg)
        {
            return false;
        }
        if(strUser != __rhs.strUser)
        {
            return false;
        }
        if(nUnit != __rhs.nUnit)
        {
            return false;
        }
        if(nType != __rhs.nType)
        {
            return false;
        }
        if(bCleared != __rhs.bCleared)
        {
            return false;
        }
        return true;
    }

    bool operator<(const LogMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(nID < __rhs.nID)
        {
            return true;
        }
        else if(__rhs.nID < nID)
        {
            return false;
        }
        if(nEventID < __rhs.nEventID)
        {
            return true;
        }
        else if(__rhs.nEventID < nEventID)
        {
            return false;
        }
        if(lTime < __rhs.lTime)
        {
            return true;
        }
        else if(__rhs.lTime < lTime)
        {
            return false;
        }
        if(nParam1 < __rhs.nParam1)
        {
            return true;
        }
        else if(__rhs.nParam1 < nParam1)
        {
            return false;
        }
        if(nParam2 < __rhs.nParam2)
        {
            return true;
        }
        else if(__rhs.nParam2 < nParam2)
        {
            return false;
        }
        if(dParam1 < __rhs.dParam1)
        {
            return true;
        }
        else if(__rhs.dParam1 < dParam1)
        {
            return false;
        }
        if(dParam2 < __rhs.dParam2)
        {
            return true;
        }
        else if(__rhs.dParam2 < dParam2)
        {
            return false;
        }
        if(strUnit < __rhs.strUnit)
        {
            return true;
        }
        else if(__rhs.strUnit < strUnit)
        {
            return false;
        }
        if(strMsg < __rhs.strMsg)
        {
            return true;
        }
        else if(__rhs.strMsg < strMsg)
        {
            return false;
        }
        if(strUser < __rhs.strUser)
        {
            return true;
        }
        else if(__rhs.strUser < strUser)
        {
            return false;
        }
        if(nUnit < __rhs.nUnit)
        {
            return true;
        }
        else if(__rhs.nUnit < nUnit)
        {
            return false;
        }
        if(nType < __rhs.nType)
        {
            return true;
        }
        else if(__rhs.nType < nType)
        {
            return false;
        }
        if(bCleared < __rhs.bCleared)
        {
            return true;
        }
        else if(__rhs.bCleared < bCleared)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const LogMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const LogMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const LogMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const LogMsg& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

struct AlarmMsg
{
    ::Ice::Int nID;
    ::Ice::Int nEventID;
    ::Ice::Long firstTime;
    ::Ice::Long lastTime;
    ::std::string strMsg;
    ::Ice::Int nCount;

    bool operator==(const AlarmMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return true;
        }
        if(nID != __rhs.nID)
        {
            return false;
        }
        if(nEventID != __rhs.nEventID)
        {
            return false;
        }
        if(firstTime != __rhs.firstTime)
        {
            return false;
        }
        if(lastTime != __rhs.lastTime)
        {
            return false;
        }
        if(strMsg != __rhs.strMsg)
        {
            return false;
        }
        if(nCount != __rhs.nCount)
        {
            return false;
        }
        return true;
    }

    bool operator<(const AlarmMsg& __rhs) const
    {
        if(this == &__rhs)
        {
            return false;
        }
        if(nID < __rhs.nID)
        {
            return true;
        }
        else if(__rhs.nID < nID)
        {
            return false;
        }
        if(nEventID < __rhs.nEventID)
        {
            return true;
        }
        else if(__rhs.nEventID < nEventID)
        {
            return false;
        }
        if(firstTime < __rhs.firstTime)
        {
            return true;
        }
        else if(__rhs.firstTime < firstTime)
        {
            return false;
        }
        if(lastTime < __rhs.lastTime)
        {
            return true;
        }
        else if(__rhs.lastTime < lastTime)
        {
            return false;
        }
        if(strMsg < __rhs.strMsg)
        {
            return true;
        }
        else if(__rhs.strMsg < strMsg)
        {
            return false;
        }
        if(nCount < __rhs.nCount)
        {
            return true;
        }
        else if(__rhs.nCount < nCount)
        {
            return false;
        }
        return false;
    }

    bool operator!=(const AlarmMsg& __rhs) const
    {
        return !operator==(__rhs);
    }
    bool operator<=(const AlarmMsg& __rhs) const
    {
        return operator<(__rhs) || operator==(__rhs);
    }
    bool operator>(const AlarmMsg& __rhs) const
    {
        return !operator<(__rhs) && !operator==(__rhs);
    }
    bool operator>=(const AlarmMsg& __rhs) const
    {
        return !operator<(__rhs);
    }

    void __write(::IceInternal::BasicStream*) const;
    void __read(::IceInternal::BasicStream*);
};

typedef ::std::vector< ::Gemma::LogMsg> LogList;
void __writeLogList(::IceInternal::BasicStream*, const ::Gemma::LogMsg*, const ::Gemma::LogMsg*);
void __readLogList(::IceInternal::BasicStream*, LogList&);

typedef ::std::vector< ::Gemma::AlarmMsg> AlarmList;
void __writeAlarmList(::IceInternal::BasicStream*, const ::Gemma::AlarmMsg*, const ::Gemma::AlarmMsg*);
void __readAlarmList(::IceInternal::BasicStream*, AlarmList&);

typedef ::std::vector< ::Ice::Int> IDList;

}

namespace Gemma
{

class Callback_Log_sendLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_sendLog_Base> Callback_Log_sendLogPtr;

class Callback_Log_GetLog_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetLog_Base> Callback_Log_GetLogPtr;

class Callback_Log_GetLastID_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetLastID_Base> Callback_Log_GetLastIDPtr;

class Callback_Log_GetCountOffline_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetCountOffline_Base> Callback_Log_GetCountOfflinePtr;

class Callback_Log_GetLogOffline_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetLogOffline_Base> Callback_Log_GetLogOfflinePtr;

class Callback_Log_GetAlarmCount_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetAlarmCount_Base> Callback_Log_GetAlarmCountPtr;

class Callback_Log_GetAlarms_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_GetAlarms_Base> Callback_Log_GetAlarmsPtr;

class Callback_Log_ClearAlarms_Base : virtual public ::IceInternal::CallbackBase { };
typedef ::IceUtil::Handle< Callback_Log_ClearAlarms_Base> Callback_Log_ClearAlarmsPtr;

}

namespace IceProxy
{

namespace Gemma
{

class Log : virtual public ::IceProxy::Ice::Object
{
public:

    void sendLog(const ::Gemma::LogList& data)
    {
        sendLog(data, 0);
    }
    void sendLog(const ::Gemma::LogList& data, const ::Ice::Context& __ctx)
    {
        sendLog(data, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data)
    {
        return begin_sendLog(data, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data, const ::Ice::Context& __ctx)
    {
        return begin_sendLog(data, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendLog(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendLog(data, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data, const ::Gemma::Callback_Log_sendLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendLog(data, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList& data, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_sendLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_sendLog(data, &__ctx, __del, __cookie);
    }

    void end_sendLog(const ::Ice::AsyncResultPtr&);
    
private:

    void sendLog(const ::Gemma::LogList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_sendLog(const ::Gemma::LogList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gemma::LogList GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return GetLog(nID, nCount, Types, IDS, skey, 0);
    }
    ::Gemma::LogList GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return GetLog(nID, nCount, Types, IDS, skey, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Gemma::Callback_Log_GetLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int nID, ::Ice::Int nCount, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetLogPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLog(nID, nCount, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Gemma::LogList end_GetLog(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gemma::LogList GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetLastID()
    {
        return GetLastID(0);
    }
    ::Ice::Int GetLastID(const ::Ice::Context& __ctx)
    {
        return GetLastID(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetLastID()
    {
        return begin_GetLastID(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastID(const ::Ice::Context& __ctx)
    {
        return begin_GetLastID(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLastID(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastID(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastID(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastID(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastID(const ::Gemma::Callback_Log_GetLastIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastID(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLastID(const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetLastIDPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLastID(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetLastID(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetLastID(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLastID(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0);
    }
    ::Ice::Int GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Gemma::Callback_Log_GetCountOfflinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetCountOfflinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetCountOffline(llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetCountOffline(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gemma::LogList GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0);
    }
    ::Gemma::LogList GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Gemma::Callback_Log_GetLogOfflinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int nIndex, ::Ice::Int nCount, ::Ice::Long llDateTimeEnd, ::Ice::Long llDateTimeBegin, const ::Gemma::IDList& Types, const ::Gemma::IDList& IDS, const ::std::string& skey, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetLogOfflinePtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetLogOffline(nIndex, nCount, llDateTimeEnd, llDateTimeBegin, Types, IDS, skey, &__ctx, __del, __cookie);
    }

    ::Gemma::LogList end_GetLogOffline(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gemma::LogList GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Ice::Int GetAlarmCount()
    {
        return GetAlarmCount(0);
    }
    ::Ice::Int GetAlarmCount(const ::Ice::Context& __ctx)
    {
        return GetAlarmCount(&__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount()
    {
        return begin_GetAlarmCount(0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Ice::Context& __ctx)
    {
        return begin_GetAlarmCount(&__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarmCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarmCount(&__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Gemma::Callback_Log_GetAlarmCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarmCount(0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetAlarmCountPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarmCount(&__ctx, __del, __cookie);
    }

    ::Ice::Int end_GetAlarmCount(const ::Ice::AsyncResultPtr&);
    
private:

    ::Ice::Int GetAlarmCount(const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAlarmCount(const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    ::Gemma::AlarmList GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount)
    {
        return GetAlarms(nIndex, nCount, 0);
    }
    ::Gemma::AlarmList GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context& __ctx)
    {
        return GetAlarms(nIndex, nCount, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount)
    {
        return begin_GetAlarms(nIndex, nCount, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context& __ctx)
    {
        return begin_GetAlarms(nIndex, nCount, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarms(nIndex, nCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarms(nIndex, nCount, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Gemma::Callback_Log_GetAlarmsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarms(nIndex, nCount, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int nIndex, ::Ice::Int nCount, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_GetAlarmsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_GetAlarms(nIndex, nCount, &__ctx, __del, __cookie);
    }

    ::Gemma::AlarmList end_GetAlarms(const ::Ice::AsyncResultPtr&);
    
private:

    ::Gemma::AlarmList GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:

    void ClearAlarms(const ::Gemma::IDList& IDS)
    {
        ClearAlarms(IDS, 0);
    }
    void ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context& __ctx)
    {
        ClearAlarms(IDS, &__ctx);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS)
    {
        return begin_ClearAlarms(IDS, 0, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context& __ctx)
    {
        return begin_ClearAlarms(IDS, &__ctx, ::IceInternal::__dummyCallback, 0);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ClearAlarms(IDS, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context& __ctx, const ::Ice::CallbackPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ClearAlarms(IDS, &__ctx, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Gemma::Callback_Log_ClearAlarmsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ClearAlarms(IDS, 0, __del, __cookie);
    }

    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList& IDS, const ::Ice::Context& __ctx, const ::Gemma::Callback_Log_ClearAlarmsPtr& __del, const ::Ice::LocalObjectPtr& __cookie = 0)
    {
        return begin_ClearAlarms(IDS, &__ctx, __del, __cookie);
    }

    void end_ClearAlarms(const ::Ice::AsyncResultPtr&);
    
private:

    void ClearAlarms(const ::Gemma::IDList&, const ::Ice::Context*);
    ::Ice::AsyncResultPtr begin_ClearAlarms(const ::Gemma::IDList&, const ::Ice::Context*, const ::IceInternal::CallbackBasePtr&, const ::Ice::LocalObjectPtr& __cookie = 0);
    
public:
    
    ::IceInternal::ProxyHandle<Log> ice_context(const ::Ice::Context& __context) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_context(__context).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_context(__context).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_adapterId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_adapterId(__id).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_adapterId(__id).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_endpoints(const ::Ice::EndpointSeq& __endpoints) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_endpoints(__endpoints).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_endpoints(__endpoints).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_locatorCacheTimeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_locatorCacheTimeout(__timeout).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_locatorCacheTimeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_connectionCached(bool __cached) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_connectionCached(__cached).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_connectionCached(__cached).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_endpointSelection(::Ice::EndpointSelectionType __est) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_endpointSelection(__est).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_endpointSelection(__est).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_secure(bool __secure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_secure(__secure).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_secure(__secure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_preferSecure(bool __preferSecure) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_preferSecure(__preferSecure).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_preferSecure(__preferSecure).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_router(const ::Ice::RouterPrx& __router) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_router(__router).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_router(__router).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_locator(const ::Ice::LocatorPrx& __locator) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_locator(__locator).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_locator(__locator).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_collocationOptimized(bool __co) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_collocationOptimized(__co).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_collocationOptimized(__co).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_twoway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_twoway().get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_twoway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_oneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_oneway().get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_oneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_batchOneway() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_batchOneway().get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_batchOneway().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_datagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_datagram().get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_datagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_batchDatagram() const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_batchDatagram().get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_batchDatagram().get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_compress(bool __compress) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_compress(__compress).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_compress(__compress).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_timeout(int __timeout) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_timeout(__timeout).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_timeout(__timeout).get());
    #endif
    }
    
    ::IceInternal::ProxyHandle<Log> ice_connectionId(const std::string& __id) const
    {
    #if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
        typedef ::IceProxy::Ice::Object _Base;
        return dynamic_cast<Log*>(_Base::ice_connectionId(__id).get());
    #else
        return dynamic_cast<Log*>(::IceProxy::Ice::Object::ice_connectionId(__id).get());
    #endif
    }
    
    static const ::std::string& ice_staticId();

private: 

    virtual ::IceInternal::Handle< ::IceDelegateM::Ice::Object> __createDelegateM();
    virtual ::IceInternal::Handle< ::IceDelegateD::Ice::Object> __createDelegateD();
    virtual ::IceProxy::Ice::Object* __newInstance() const;
};

}

}

namespace IceDelegate
{

namespace Gemma
{

class Log : virtual public ::IceDelegate::Ice::Object
{
public:

    virtual void sendLog(const ::Gemma::LogList&, const ::Ice::Context*) = 0;

    virtual ::Gemma::LogList GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int GetLastID(const ::Ice::Context*) = 0;

    virtual ::Ice::Int GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Gemma::LogList GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*) = 0;

    virtual ::Ice::Int GetAlarmCount(const ::Ice::Context*) = 0;

    virtual ::Gemma::AlarmList GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Context*) = 0;

    virtual void ClearAlarms(const ::Gemma::IDList&, const ::Ice::Context*) = 0;
};

}

}

namespace IceDelegateM
{

namespace Gemma
{

class Log : virtual public ::IceDelegate::Gemma::Log,
            virtual public ::IceDelegateM::Ice::Object
{
public:

    virtual void sendLog(const ::Gemma::LogList&, const ::Ice::Context*);

    virtual ::Gemma::LogList GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetLastID(const ::Ice::Context*);

    virtual ::Ice::Int GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Gemma::LogList GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetAlarmCount(const ::Ice::Context*);

    virtual ::Gemma::AlarmList GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void ClearAlarms(const ::Gemma::IDList&, const ::Ice::Context*);
};

}

}

namespace IceDelegateD
{

namespace Gemma
{

class Log : virtual public ::IceDelegate::Gemma::Log,
            virtual public ::IceDelegateD::Ice::Object
{
public:

    virtual void sendLog(const ::Gemma::LogList&, const ::Ice::Context*);

    virtual ::Gemma::LogList GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetLastID(const ::Ice::Context*);

    virtual ::Ice::Int GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Gemma::LogList GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Context*);

    virtual ::Ice::Int GetAlarmCount(const ::Ice::Context*);

    virtual ::Gemma::AlarmList GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Context*);

    virtual void ClearAlarms(const ::Gemma::IDList&, const ::Ice::Context*);
};

}

}

namespace Gemma
{

class Log : virtual public ::Ice::Object
{
public:

    typedef LogPrx ProxyType;
    typedef LogPtr PointerType;
    
    virtual ::Ice::ObjectPtr ice_clone() const;

    virtual bool ice_isA(const ::std::string&, const ::Ice::Current& = ::Ice::Current()) const;
    virtual ::std::vector< ::std::string> ice_ids(const ::Ice::Current& = ::Ice::Current()) const;
    virtual const ::std::string& ice_id(const ::Ice::Current& = ::Ice::Current()) const;
    static const ::std::string& ice_staticId();

    virtual void sendLog(const ::Gemma::LogList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___sendLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Gemma::LogList GetLog(::Ice::Int, ::Ice::Int, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLog(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetLastID(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLastID(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetCountOffline(::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetCountOffline(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Gemma::LogList GetLogOffline(::Ice::Int, ::Ice::Int, ::Ice::Long, ::Ice::Long, const ::Gemma::IDList&, const ::Gemma::IDList&, const ::std::string&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetLogOffline(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::Int GetAlarmCount(const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAlarmCount(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Gemma::AlarmList GetAlarms(::Ice::Int, ::Ice::Int, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___GetAlarms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void ClearAlarms(const ::Gemma::IDList&, const ::Ice::Current& = ::Ice::Current()) = 0;
    ::Ice::DispatchStatus ___ClearAlarms(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual ::Ice::DispatchStatus __dispatch(::IceInternal::Incoming&, const ::Ice::Current&);

    virtual void __write(::IceInternal::BasicStream*) const;
    virtual void __read(::IceInternal::BasicStream*, bool);
// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
    virtual void __write(const ::Ice::OutputStreamPtr&) const;
    virtual void __read(const ::Ice::InputStreamPtr&, bool);
#endif
};

inline bool operator==(const Log& l, const Log& r)
{
    return static_cast<const ::Ice::Object&>(l) == static_cast<const ::Ice::Object&>(r);
}

inline bool operator<(const Log& l, const Log& r)
{
    return static_cast<const ::Ice::Object&>(l) < static_cast<const ::Ice::Object&>(r);
}

}

namespace Gemma
{

template<class T>
class CallbackNC_Log_sendLog : public Callback_Log_sendLog_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Log_sendLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Log_sendLogPtr
newCallback_Log_sendLog(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_sendLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_sendLogPtr
newCallback_Log_sendLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_sendLog<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Log_sendLogPtr
newCallback_Log_sendLog(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_sendLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_sendLogPtr
newCallback_Log_sendLog(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_sendLog<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_sendLog : public Callback_Log_sendLog_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Log_sendLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Log_sendLogPtr
newCallback_Log_sendLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_sendLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_sendLogPtr
newCallback_Log_sendLog(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_sendLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Log_sendLogPtr
newCallback_Log_sendLog(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_sendLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_sendLogPtr
newCallback_Log_sendLog(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_sendLog<T, CT>(instance, 0, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetLog : public Callback_Log_GetLog_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gemma::LogList&);

    CallbackNC_Log_GetLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::LogList __ret;
        try
        {
            __ret = __proxy->end_GetLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetLogPtr
newCallback_Log_GetLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::LogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLog<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetLogPtr
newCallback_Log_GetLog(T* instance, void (T::*cb)(const ::Gemma::LogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLog<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetLog : public Callback_Log_GetLog_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gemma::LogList&, const CT&);

    Callback_Log_GetLog(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::LogList __ret;
        try
        {
            __ret = __proxy->end_GetLog(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetLogPtr
newCallback_Log_GetLog(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::LogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetLogPtr
newCallback_Log_GetLog(T* instance, void (T::*cb)(const ::Gemma::LogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLog<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetLastID : public Callback_Log_GetLastID_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Log_GetLastID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetLastID(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetLastIDPtr
newCallback_Log_GetLastID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLastID<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetLastIDPtr
newCallback_Log_GetLastID(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLastID<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetLastID : public Callback_Log_GetLastID_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Log_GetLastID(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetLastID(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetLastIDPtr
newCallback_Log_GetLastID(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLastID<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetLastIDPtr
newCallback_Log_GetLastID(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLastID<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetCountOffline : public Callback_Log_GetCountOffline_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Log_GetCountOffline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCountOffline(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetCountOfflinePtr
newCallback_Log_GetCountOffline(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetCountOffline<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetCountOfflinePtr
newCallback_Log_GetCountOffline(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetCountOffline<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetCountOffline : public Callback_Log_GetCountOffline_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Log_GetCountOffline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetCountOffline(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetCountOfflinePtr
newCallback_Log_GetCountOffline(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetCountOffline<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetCountOfflinePtr
newCallback_Log_GetCountOffline(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetCountOffline<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetLogOffline : public Callback_Log_GetLogOffline_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gemma::LogList&);

    CallbackNC_Log_GetLogOffline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::LogList __ret;
        try
        {
            __ret = __proxy->end_GetLogOffline(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetLogOfflinePtr
newCallback_Log_GetLogOffline(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::LogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLogOffline<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetLogOfflinePtr
newCallback_Log_GetLogOffline(T* instance, void (T::*cb)(const ::Gemma::LogList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetLogOffline<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetLogOffline : public Callback_Log_GetLogOffline_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gemma::LogList&, const CT&);

    Callback_Log_GetLogOffline(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::LogList __ret;
        try
        {
            __ret = __proxy->end_GetLogOffline(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetLogOfflinePtr
newCallback_Log_GetLogOffline(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::LogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLogOffline<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetLogOfflinePtr
newCallback_Log_GetLogOffline(T* instance, void (T::*cb)(const ::Gemma::LogList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetLogOffline<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetAlarmCount : public Callback_Log_GetAlarmCount_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(::Ice::Int);

    CallbackNC_Log_GetAlarmCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetAlarmCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetAlarmCountPtr
newCallback_Log_GetAlarmCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetAlarmCount<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetAlarmCountPtr
newCallback_Log_GetAlarmCount(T* instance, void (T::*cb)(::Ice::Int), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetAlarmCount<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetAlarmCount : public Callback_Log_GetAlarmCount_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(::Ice::Int, const CT&);

    Callback_Log_GetAlarmCount(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Ice::Int __ret;
        try
        {
            __ret = __proxy->end_GetAlarmCount(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetAlarmCountPtr
newCallback_Log_GetAlarmCount(const IceUtil::Handle<T>& instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetAlarmCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetAlarmCountPtr
newCallback_Log_GetAlarmCount(T* instance, void (T::*cb)(::Ice::Int, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetAlarmCount<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_GetAlarms : public Callback_Log_GetAlarms_Base, public ::IceInternal::TwowayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)(const ::Gemma::AlarmList&);

    CallbackNC_Log_GetAlarms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallbackNC<T>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::AlarmList __ret;
        try
        {
            __ret = __proxy->end_GetAlarms(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::CallbackNC<T>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret);
#else
            (::IceInternal::CallbackNC<T>::callback.get()->*response)(__ret);
#endif
        }
    }

    Response response;
};

template<class T> Callback_Log_GetAlarmsPtr
newCallback_Log_GetAlarms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::AlarmList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetAlarms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_GetAlarmsPtr
newCallback_Log_GetAlarms(T* instance, void (T::*cb)(const ::Gemma::AlarmList&), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_GetAlarms<T>(instance, cb, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_GetAlarms : public Callback_Log_GetAlarms_Base, public ::IceInternal::TwowayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const ::Gemma::AlarmList&, const CT&);

    Callback_Log_GetAlarms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::TwowayCallback<T, CT>(obj, cb != 0, excb, sentcb), response(cb)
    {
    }

    virtual void __completed(const ::Ice::AsyncResultPtr& __result) const
    {
        ::Gemma::LogPrx __proxy = ::Gemma::LogPrx::uncheckedCast(__result->getProxy());
        ::Gemma::AlarmList __ret;
        try
        {
            __ret = __proxy->end_GetAlarms(__result);
        }
        catch(::Ice::Exception& ex)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            __exception(__result, ex);
#else
            ::IceInternal::Callback<T, CT>::__exception(__result, ex);
#endif
            return;
        }
        if(response)
        {
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
            (callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#else
            (::IceInternal::Callback<T, CT>::callback.get()->*response)(__ret, CT::dynamicCast(__result->getCookie()));
#endif
        }
    }

    Response response;
};

template<class T, typename CT> Callback_Log_GetAlarmsPtr
newCallback_Log_GetAlarms(const IceUtil::Handle<T>& instance, void (T::*cb)(const ::Gemma::AlarmList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetAlarms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_GetAlarmsPtr
newCallback_Log_GetAlarms(T* instance, void (T::*cb)(const ::Gemma::AlarmList&, const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_GetAlarms<T, CT>(instance, cb, excb, sentcb);
}

template<class T>
class CallbackNC_Log_ClearAlarms : public Callback_Log_ClearAlarms_Base, public ::IceInternal::OnewayCallbackNC<T>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception&);
    typedef void (T::*Sent)(bool);
    typedef void (T::*Response)();

    CallbackNC_Log_ClearAlarms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallbackNC<T>(obj, cb, excb, sentcb)
    {
    }
};

template<class T> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(const IceUtil::Handle<T>& instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_ClearAlarms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_ClearAlarms<T>(instance, 0, excb, sentcb);
}

template<class T> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(T* instance, void (T::*cb)(), void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_ClearAlarms<T>(instance, cb, excb, sentcb);
}

template<class T> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(T* instance, void (T::*excb)(const ::Ice::Exception&), void (T::*sentcb)(bool) = 0)
{
    return new CallbackNC_Log_ClearAlarms<T>(instance, 0, excb, sentcb);
}

template<class T, typename CT>
class Callback_Log_ClearAlarms : public Callback_Log_ClearAlarms_Base, public ::IceInternal::OnewayCallback<T, CT>
{
public:

    typedef IceUtil::Handle<T> TPtr;

    typedef void (T::*Exception)(const ::Ice::Exception& , const CT&);
    typedef void (T::*Sent)(bool , const CT&);
    typedef void (T::*Response)(const CT&);

    Callback_Log_ClearAlarms(const TPtr& obj, Response cb, Exception excb, Sent sentcb)
        : ::IceInternal::OnewayCallback<T, CT>(obj, cb, excb, sentcb)
    {
    }
};

template<class T, typename CT> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(const IceUtil::Handle<T>& instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_ClearAlarms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(const IceUtil::Handle<T>& instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_ClearAlarms<T, CT>(instance, 0, excb, sentcb);
}

template<class T, typename CT> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(T* instance, void (T::*cb)(const CT&), void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_ClearAlarms<T, CT>(instance, cb, excb, sentcb);
}

template<class T, typename CT> Callback_Log_ClearAlarmsPtr
newCallback_Log_ClearAlarms(T* instance, void (T::*excb)(const ::Ice::Exception&, const CT&), void (T::*sentcb)(bool, const CT&) = 0)
{
    return new Callback_Log_ClearAlarms<T, CT>(instance, 0, excb, sentcb);
}

}

#endif
