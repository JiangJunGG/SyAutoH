// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `iGuiHub.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

#include <stdafx.h>
#include <iGuiHub.h>
#include <Ice/LocalException.h>
#include <Ice/ObjectFactory.h>
#include <Ice/BasicStream.h>
#include <IceUtil/Iterator.h>

#ifndef ICE_IGNORE_VERSION
#   if ICE_INT_VERSION / 100 != 304
#       error Ice version mismatch!
#   endif
#   if ICE_INT_VERSION % 100 > 50
#       error Beta header file detected
#   endif
#   if ICE_INT_VERSION % 100 < 2
#       error Ice patch level mismatch!
#   endif
#endif

static const ::std::string __MCS__GuiDataUpdater__UpdateData_name = "UpdateData";

static const ::std::string __MCS__GuiDataHub__SetPushCmd_name = "SetPushCmd";

static const ::std::string __MCS__GuiDataHub__SetPushTimer_name = "SetPushTimer";

static const ::std::string __MCS__GuiDataHub__ReadData_name = "ReadData";

static const ::std::string __MCS__GuiDataHub__WriteData_name = "WriteData";

static const ::std::string __MCS__GuiDataHub__SetDataUpdater_name = "SetDataUpdater";

static const ::std::string __MCS__GuiDataHub__EraseDataUpdater_name = "EraseDataUpdater";

static const ::std::string __MCS__UserManagement__Login_name = "Login";

static const ::std::string __MCS__UserManagement__Logout_name = "Logout";

static const ::std::string __MCS__UserManagement__CreateUser_name = "CreateUser";

static const ::std::string __MCS__UserManagement__SetUserPW_name = "SetUserPW";

static const ::std::string __MCS__UserManagement__SetUserRight_name = "SetUserRight";

static const ::std::string __MCS__UserManagement__DeleteUser_name = "DeleteUser";

static const ::std::string __MCS__UserManagement__GetUserCount_name = "GetUserCount";

static const ::std::string __MCS__UserManagement__GetUserList_name = "GetUserList";

::Ice::Object* IceInternal::upCast(::MCS::GuiDataUpdater* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::MCS::GuiDataUpdater* p) { return p; }

::Ice::Object* IceInternal::upCast(::MCS::GuiDataHub* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::MCS::GuiDataHub* p) { return p; }

::Ice::Object* IceInternal::upCast(::MCS::UserManagement* p) { return p; }
::IceProxy::Ice::Object* IceInternal::upCast(::IceProxy::MCS::UserManagement* p) { return p; }

void
MCS::__read(::IceInternal::BasicStream* __is, ::MCS::GuiDataUpdaterPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MCS::GuiDataUpdater;
        v->__copyFrom(proxy);
    }
}

void
MCS::__read(::IceInternal::BasicStream* __is, ::MCS::GuiDataHubPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MCS::GuiDataHub;
        v->__copyFrom(proxy);
    }
}

void
MCS::__read(::IceInternal::BasicStream* __is, ::MCS::UserManagementPrx& v)
{
    ::Ice::ObjectPrx proxy;
    __is->read(proxy);
    if(!proxy)
    {
        v = 0;
    }
    else
    {
        v = new ::IceProxy::MCS::UserManagement;
        v->__copyFrom(proxy);
    }
}

void
MCS::GuiDataItem::__write(::IceInternal::BasicStream* __os) const
{
    ::MCS::GuiHub::__write(__os, enumTag);
    __os->write(sVal);
}

void
MCS::GuiDataItem::__read(::IceInternal::BasicStream* __is)
{
    ::MCS::GuiHub::__read(__is, enumTag);
    __is->read(sVal);
}

void
MCS::User::__write(::IceInternal::BasicStream* __os) const
{
    __os->write(nID);
    __os->write(sName);
    __os->write(nRight);
}

void
MCS::User::__read(::IceInternal::BasicStream* __is)
{
    __is->read(nID);
    __is->read(sName);
    __is->read(nRight);
}

void
MCS::__writeUserList(::IceInternal::BasicStream* __os, const ::MCS::User* begin, const ::MCS::User* end)
{
    ::Ice::Int size = static_cast< ::Ice::Int>(end - begin);
    __os->writeSize(size);
    for(int i = 0; i < size; ++i)
    {
        begin[i].__write(__os);
    }
}

void
MCS::__readUserList(::IceInternal::BasicStream* __is, ::MCS::UserList& v)
{
    ::Ice::Int sz;
    __is->readAndCheckSeqSize(9, sz);
    v.resize(sz);
    for(int i = 0; i < sz; ++i)
    {
        v[i].__read(__is);
    }
}

IceAsync::MCS::AMD_GuiDataUpdater_UpdateData::AMD_GuiDataUpdater_UpdateData(::IceInternal::Incoming& in) :
    ::IceInternal::IncomingAsync(in)
{
}

void
IceAsync::MCS::AMD_GuiDataUpdater_UpdateData::ice_response()
{
    if(__validateResponse(true))
    {
        __response(true);
    }
}

void
IceProxy::MCS::GuiDataUpdater::UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataUpdater* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataUpdater*>(__delBase.get());
            __del->UpdateData(time, data, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataUpdater::begin_UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataUpdater__UpdateData_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataUpdater__UpdateData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(time);
        data.__write(__os);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::MCS::GuiDataUpdater::end_UpdateData(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MCS__GuiDataUpdater__UpdateData_name);
}

bool
IceProxy::MCS::GuiDataUpdater::UpdateData_async(const ::MCS::AMI_GuiDataUpdater_UpdateDataPtr& __cb, ::Ice::Long time, const ::MCS::GuiDataItem& data)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::MCS::newCallback_GuiDataUpdater_UpdateData(__cb, &::MCS::AMI_GuiDataUpdater_UpdateData::__response, &::MCS::AMI_GuiDataUpdater_UpdateData::__exception, &::MCS::AMI_GuiDataUpdater_UpdateData::__sent);
    }
    else
    {
         __del = ::MCS::newCallback_GuiDataUpdater_UpdateData(__cb, &::MCS::AMI_GuiDataUpdater_UpdateData::__response, &::MCS::AMI_GuiDataUpdater_UpdateData::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_UpdateData(time, data, 0, __del);
    return __ar->sentSynchronously();
}

bool
IceProxy::MCS::GuiDataUpdater::UpdateData_async(const ::MCS::AMI_GuiDataUpdater_UpdateDataPtr& __cb, ::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context& __ctx)
{
    ::IceInternal::CallbackBasePtr __del;
    if(dynamic_cast< ::Ice::AMISentCallback*>(__cb.get()))
    {
         __del = ::MCS::newCallback_GuiDataUpdater_UpdateData(__cb, &::MCS::AMI_GuiDataUpdater_UpdateData::__response, &::MCS::AMI_GuiDataUpdater_UpdateData::__exception, &::MCS::AMI_GuiDataUpdater_UpdateData::__sent);
    }
    else
    {
         __del = ::MCS::newCallback_GuiDataUpdater_UpdateData(__cb, &::MCS::AMI_GuiDataUpdater_UpdateData::__response, &::MCS::AMI_GuiDataUpdater_UpdateData::__exception);
    }
    ::Ice::AsyncResultPtr __ar = begin_UpdateData(time, data, &__ctx, __del);
    return __ar->sentSynchronously();
}

const ::std::string&
IceProxy::MCS::GuiDataUpdater::ice_staticId()
{
    return ::MCS::GuiDataUpdater::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::MCS::GuiDataUpdater::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::MCS::GuiDataUpdater);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::MCS::GuiDataUpdater::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::MCS::GuiDataUpdater);
}

::IceProxy::Ice::Object*
IceProxy::MCS::GuiDataUpdater::__newInstance() const
{
    return new GuiDataUpdater;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__GuiDataHub__SetPushCmd_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            return __del->SetPushCmd(updater, list, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__GuiDataHub__SetPushCmd_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__SetPushCmd_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__SetPushCmd_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
        if(list.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::MCS::GuiHub::__writeGuiPushDataList(__os, &list[0], &list[0] + list.size());
        }
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::end_SetPushCmd(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__GuiDataHub__SetPushCmd_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__GuiDataHub__SetPushTimer_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            return __del->SetPushTimer(period, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__GuiDataHub__SetPushTimer_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__SetPushTimer_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__SetPushTimer_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(period);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::end_SetPushTimer(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__GuiDataHub__SetPushTimer_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::std::string
IceProxy::MCS::GuiDataHub::ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__GuiDataHub__ReadData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            return __del->ReadData(Tag, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__GuiDataHub__ReadData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__ReadData_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__ReadData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        ::MCS::GuiHub::__write(__os, Tag);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::std::string
IceProxy::MCS::GuiDataHub::end_ReadData(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__GuiDataHub__ReadData_name);
    ::std::string __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__GuiDataHub__WriteData_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            return __del->WriteData(Tag, Val, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__GuiDataHub__WriteData_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__WriteData_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__WriteData_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        ::MCS::GuiHub::__write(__os, Tag);
        __os->write(Val);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::GuiDataHub::end_WriteData(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__GuiDataHub__WriteData_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

void
IceProxy::MCS::GuiDataHub::SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            __del->SetDataUpdater(updater, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__SetDataUpdater_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__SetDataUpdater_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::MCS::GuiDataHub::end_SetDataUpdater(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MCS__GuiDataHub__SetDataUpdater_name);
}

void
IceProxy::MCS::GuiDataHub::EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::GuiDataHub* __del = dynamic_cast< ::IceDelegate::MCS::GuiDataHub*>(__delBase.get());
            __del->EraseDataUpdater(updater, __ctx);
            return;
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::GuiDataHub::begin_EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__GuiDataHub__EraseDataUpdater_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__GuiDataHub__EraseDataUpdater_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

void
IceProxy::MCS::GuiDataHub::end_EraseDataUpdater(const ::Ice::AsyncResultPtr& __result)
{
    __end(__result, __MCS__GuiDataHub__EraseDataUpdater_name);
}

const ::std::string&
IceProxy::MCS::GuiDataHub::ice_staticId()
{
    return ::MCS::GuiDataHub::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::MCS::GuiDataHub::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::MCS::GuiDataHub);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::MCS::GuiDataHub::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::MCS::GuiDataHub);
}

::IceProxy::Ice::Object*
IceProxy::MCS::GuiDataHub::__newInstance() const
{
    return new GuiDataHub;
}

::Ice::Int
IceProxy::MCS::UserManagement::Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__Login_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->Login(user, pass, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__Login_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__Login_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__Login_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(user);
        __os->write(pass);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_Login(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__Login_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::Logout(::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__Logout_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->Logout(session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_Logout(::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__Logout_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__Logout_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__Logout_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_Logout(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__Logout_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__CreateUser_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->CreateUser(user, pass, nRight, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__CreateUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__CreateUser_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__CreateUser_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(user);
        __os->write(pass);
        __os->write(nRight);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_CreateUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__CreateUser_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__SetUserPW_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->SetUserPW(nUID, pass, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__SetUserPW_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__SetUserPW_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__SetUserPW_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nUID);
        __os->write(pass);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_SetUserPW(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__SetUserPW_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__SetUserRight_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->SetUserRight(nUID, nRight, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__SetUserRight_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__SetUserRight_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__SetUserRight_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nUID);
        __os->write(nRight);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_SetUserRight(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__SetUserRight_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__DeleteUser_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->DeleteUser(nUID, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__DeleteUser_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__DeleteUser_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__DeleteUser_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nUID);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_DeleteUser(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__DeleteUser_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::Ice::Int
IceProxy::MCS::UserManagement::GetUserCount(::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__GetUserCount_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->GetUserCount(session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_GetUserCount(::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__GetUserCount_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__GetUserCount_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__GetUserCount_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::Ice::Int
IceProxy::MCS::UserManagement::end_GetUserCount(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__GetUserCount_name);
    ::Ice::Int __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    __is->read(__ret);
    __is->endReadEncaps();
    return __ret;
}

::MCS::UserList
IceProxy::MCS::UserManagement::GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context* __ctx)
{
    int __cnt = 0;
    while(true)
    {
        ::IceInternal::Handle< ::IceDelegate::Ice::Object> __delBase;
        try
        {
            __checkTwowayOnly(__MCS__UserManagement__GetUserList_name);
            __delBase = __getDelegate(false);
            ::IceDelegate::MCS::UserManagement* __del = dynamic_cast< ::IceDelegate::MCS::UserManagement*>(__delBase.get());
            return __del->GetUserList(nBegin, nCount, session, __ctx);
        }
        catch(const ::IceInternal::LocalExceptionWrapper& __ex)
        {
            __handleExceptionWrapperRelaxed(__delBase, __ex, true, __cnt);
        }
        catch(const ::Ice::LocalException& __ex)
        {
            __handleException(__delBase, __ex, true, __cnt);
        }
    }
}

::Ice::AsyncResultPtr
IceProxy::MCS::UserManagement::begin_GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context* __ctx, const ::IceInternal::CallbackBasePtr& __del, const ::Ice::LocalObjectPtr& __cookie)
{
    __checkAsyncTwowayOnly(__MCS__UserManagement__GetUserList_name);
    ::IceInternal::OutgoingAsyncPtr __result = new ::IceInternal::OutgoingAsync(this, __MCS__UserManagement__GetUserList_name, __del, __cookie);
    try
    {
        __result->__prepare(__MCS__UserManagement__GetUserList_name, ::Ice::Idempotent, __ctx);
        ::IceInternal::BasicStream* __os = __result->__getOs();
        __os->write(nBegin);
        __os->write(nCount);
        __os->write(session);
        __os->endWriteEncaps();
        __result->__send(true);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __result->__exceptionAsync(__ex);
    }
    return __result;
}

::MCS::UserList
IceProxy::MCS::UserManagement::end_GetUserList(const ::Ice::AsyncResultPtr& __result)
{
    ::Ice::AsyncResult::__check(__result, this, __MCS__UserManagement__GetUserList_name);
    ::MCS::UserList __ret;
    if(!__result->__wait())
    {
        try
        {
            __result->__throwUserException();
        }
        catch(const ::Ice::UserException& __ex)
        {
            throw ::Ice::UnknownUserException(__FILE__, __LINE__, __ex.ice_name());
        }
    }
    ::IceInternal::BasicStream* __is = __result->__getIs();
    __is->startReadEncaps();
    ::MCS::__readUserList(__is, __ret);
    __is->endReadEncaps();
    return __ret;
}

const ::std::string&
IceProxy::MCS::UserManagement::ice_staticId()
{
    return ::MCS::UserManagement::ice_staticId();
}

::IceInternal::Handle< ::IceDelegateM::Ice::Object>
IceProxy::MCS::UserManagement::__createDelegateM()
{
    return ::IceInternal::Handle< ::IceDelegateM::Ice::Object>(new ::IceDelegateM::MCS::UserManagement);
}

::IceInternal::Handle< ::IceDelegateD::Ice::Object>
IceProxy::MCS::UserManagement::__createDelegateD()
{
    return ::IceInternal::Handle< ::IceDelegateD::Ice::Object>(new ::IceDelegateD::MCS::UserManagement);
}

::IceProxy::Ice::Object*
IceProxy::MCS::UserManagement::__newInstance() const
{
    return new UserManagement;
}

void
IceDelegateM::MCS::GuiDataUpdater::UpdateData(::Ice::Long time, const ::MCS::GuiDataItem& data, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataUpdater__UpdateData_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(time);
        data.__write(__os);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Int
IceDelegateM::MCS::GuiDataHub::SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__SetPushCmd_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
        if(list.size() == 0)
        {
            __os->writeSize(0);
        }
        else
        {
            ::MCS::GuiHub::__writeGuiPushDataList(__os, &list[0], &list[0] + list.size());
        }
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::GuiDataHub::SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__SetPushTimer_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(period);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::std::string
IceDelegateM::MCS::GuiDataHub::ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__ReadData_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        ::MCS::GuiHub::__write(__os, Tag);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::std::string __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::GuiDataHub::WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__WriteData_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        ::MCS::GuiHub::__write(__os, Tag);
        __os->write(Val);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateM::MCS::GuiDataHub::SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__SetDataUpdater_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

void
IceDelegateM::MCS::GuiDataHub::EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__GuiDataHub__EraseDataUpdater_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(::Ice::ObjectPrx(::IceInternal::upCast(updater.get())));
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    if(!__og.is()->b.empty())
    {
        try
        {
            if(!__ok)
            {
                try
                {
                    __og.throwUserException();
                }
                catch(const ::Ice::UserException& __ex)
                {
                    ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                    throw __uue;
                }
            }
            __og.is()->skipEmptyEncaps();
        }
        catch(const ::Ice::LocalException& __ex)
        {
            throw ::IceInternal::LocalExceptionWrapper(__ex, false);
        }
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__Login_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(user);
        __os->write(pass);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::Logout(::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__Logout_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__CreateUser_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(user);
        __os->write(pass);
        __os->write(nRight);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__SetUserPW_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nUID);
        __os->write(pass);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__SetUserRight_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nUID);
        __os->write(nRight);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__DeleteUser_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nUID);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::Ice::Int
IceDelegateM::MCS::UserManagement::GetUserCount(::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__GetUserCount_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::Ice::Int __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        __is->read(__ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

::MCS::UserList
IceDelegateM::MCS::UserManagement::GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context* __context)
{
    ::IceInternal::Outgoing __og(__handler.get(), __MCS__UserManagement__GetUserList_name, ::Ice::Idempotent, __context);
    try
    {
        ::IceInternal::BasicStream* __os = __og.os();
        __os->write(nBegin);
        __os->write(nCount);
        __os->write(session);
    }
    catch(const ::Ice::LocalException& __ex)
    {
        __og.abort(__ex);
    }
    bool __ok = __og.invoke();
    ::MCS::UserList __ret;
    try
    {
        if(!__ok)
        {
            try
            {
                __og.throwUserException();
            }
            catch(const ::Ice::UserException& __ex)
            {
                ::Ice::UnknownUserException __uue(__FILE__, __LINE__, __ex.ice_name());
                throw __uue;
            }
        }
        ::IceInternal::BasicStream* __is = __og.is();
        __is->startReadEncaps();
        ::MCS::__readUserList(__is, __ret);
        __is->endReadEncaps();
        return __ret;
    }
    catch(const ::Ice::LocalException& __ex)
    {
        throw ::IceInternal::LocalExceptionWrapper(__ex, false);
    }
}

void
IceDelegateD::MCS::GuiDataUpdater::UpdateData(::Ice::Long, const ::MCS::GuiDataItem&, const ::Ice::Context*)
{
    throw ::Ice::CollocationOptimizationException(__FILE__, __LINE__);
}

::Ice::Int
IceDelegateD::MCS::GuiDataHub::SetPushCmd(const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::MCS::GuiDataUpdaterPrx& updater, const ::MCS::GuiHub::GuiPushDataList& list, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_updater(updater),
            _m_list(list),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SetPushCmd(_m_updater, _m_list, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::MCS::GuiDataUpdaterPrx& _m_updater;
        const ::MCS::GuiHub::GuiPushDataList& _m_list;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__SetPushCmd_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, updater, list, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::GuiDataHub::SetPushTimer(::Ice::Int period, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int period, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_period(period),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SetPushTimer(_m_period, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_period;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__SetPushTimer_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, period, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::std::string
IceDelegateD::MCS::GuiDataHub::ReadData(::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::std::string& __result, ::MCS::GuiHub::GuiCommand Tag, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_Tag(Tag),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->ReadData(_m_Tag, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::std::string& _result;
        ::MCS::GuiHub::GuiCommand _m_Tag;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__ReadData_name, ::Ice::Idempotent, __context);
    ::std::string __result;
    try
    {
        _DirectI __direct(__result, Tag, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::GuiDataHub::WriteData(::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::MCS::GuiHub::GuiCommand Tag, const ::std::string& Val, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_Tag(Tag),
            _m_Val(Val),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->WriteData(_m_Tag, _m_Val, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::MCS::GuiHub::GuiCommand _m_Tag;
        const ::std::string& _m_Val;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__WriteData_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, Tag, Val, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

void
IceDelegateD::MCS::GuiDataHub::SetDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_updater(updater)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->SetDataUpdater(_m_updater, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::MCS::GuiDataUpdaterPrx& _m_updater;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__SetDataUpdater_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(updater, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

void
IceDelegateD::MCS::GuiDataHub::EraseDataUpdater(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(const ::MCS::GuiDataUpdaterPrx& updater, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _m_updater(updater)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::GuiDataHub* servant = dynamic_cast< ::MCS::GuiDataHub*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            servant->EraseDataUpdater(_m_updater, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        const ::MCS::GuiDataUpdaterPrx& _m_updater;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__GuiDataHub__EraseDataUpdater_name, ::Ice::Idempotent, __context);
    try
    {
        _DirectI __direct(updater, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
}

::Ice::Int
IceDelegateD::MCS::UserManagement::Login(const ::std::string& user, const ::std::string& pass, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& user, const ::std::string& pass, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_user(user),
            _m_pass(pass)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->Login(_m_user, _m_pass, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_user;
        const ::std::string& _m_pass;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__Login_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, user, pass, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::Logout(::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->Logout(_m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__Logout_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::CreateUser(const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, const ::std::string& user, const ::std::string& pass, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_user(user),
            _m_pass(pass),
            _m_nRight(nRight),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->CreateUser(_m_user, _m_pass, _m_nRight, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        const ::std::string& _m_user;
        const ::std::string& _m_pass;
        ::Ice::Int _m_nRight;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__CreateUser_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, user, pass, nRight, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::SetUserPW(::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int nUID, const ::std::string& pass, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nUID(nUID),
            _m_pass(pass),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SetUserPW(_m_nUID, _m_pass, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_nUID;
        const ::std::string& _m_pass;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__SetUserPW_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, nUID, pass, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::SetUserRight(::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int nUID, ::Ice::Int nRight, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nUID(nUID),
            _m_nRight(nRight),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->SetUserRight(_m_nUID, _m_nRight, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_nUID;
        ::Ice::Int _m_nRight;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__SetUserRight_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, nUID, nRight, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::DeleteUser(::Ice::Int nUID, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int nUID, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nUID(nUID),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->DeleteUser(_m_nUID, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_nUID;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__DeleteUser_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, nUID, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::Int
IceDelegateD::MCS::UserManagement::GetUserCount(::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::Ice::Int& __result, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetUserCount(_m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::Ice::Int& _result;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__GetUserCount_name, ::Ice::Idempotent, __context);
    ::Ice::Int __result;
    try
    {
        _DirectI __direct(__result, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::MCS::UserList
IceDelegateD::MCS::UserManagement::GetUserList(::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Context* __context)
{
    class _DirectI : public ::IceInternal::Direct
    {
    public:

        _DirectI(::MCS::UserList& __result, ::Ice::Int nBegin, ::Ice::Int nCount, ::Ice::Int session, const ::Ice::Current& __current) : 
            ::IceInternal::Direct(__current),
            _result(__result),
            _m_nBegin(nBegin),
            _m_nCount(nCount),
            _m_session(session)
        {
        }
        
        virtual ::Ice::DispatchStatus
        run(::Ice::Object* object)
        {
            ::MCS::UserManagement* servant = dynamic_cast< ::MCS::UserManagement*>(object);
            if(!servant)
            {
                throw ::Ice::OperationNotExistException(__FILE__, __LINE__, _current.id, _current.facet, _current.operation);
            }
            _result = servant->GetUserList(_m_nBegin, _m_nCount, _m_session, _current);
            return ::Ice::DispatchOK;
        }
        
    private:
        
        ::MCS::UserList& _result;
        ::Ice::Int _m_nBegin;
        ::Ice::Int _m_nCount;
        ::Ice::Int _m_session;
    };
    
    ::Ice::Current __current;
    __initCurrent(__current, __MCS__UserManagement__GetUserList_name, ::Ice::Idempotent, __context);
    ::MCS::UserList __result;
    try
    {
        _DirectI __direct(__result, nBegin, nCount, session, __current);
        try
        {
            __direct.servant()->__collocDispatch(__direct);
        }
        catch(...)
        {
            __direct.destroy();
            throw;
        }
        __direct.destroy();
    }
    catch(const ::Ice::SystemException&)
    {
        throw;
    }
    catch(const ::IceInternal::LocalExceptionWrapper&)
    {
        throw;
    }
    catch(const ::std::exception& __ex)
    {
        ::IceInternal::LocalExceptionWrapper::throwWrapper(__ex);
    }
    catch(...)
    {
        throw ::IceInternal::LocalExceptionWrapper(::Ice::UnknownException(__FILE__, __LINE__, "unknown c++ exception"), false);
    }
    return __result;
}

::Ice::ObjectPtr
MCS::GuiDataUpdater::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __MCS__GuiDataUpdater_ids[2] =
{
    "::Ice::Object",
    "::MCS::GuiDataUpdater"
};

bool
MCS::GuiDataUpdater::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MCS__GuiDataUpdater_ids, __MCS__GuiDataUpdater_ids + 2, _s);
}

::std::vector< ::std::string>
MCS::GuiDataUpdater::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MCS__GuiDataUpdater_ids[0], &__MCS__GuiDataUpdater_ids[2]);
}

const ::std::string&
MCS::GuiDataUpdater::ice_id(const ::Ice::Current&) const
{
    return __MCS__GuiDataUpdater_ids[1];
}

const ::std::string&
MCS::GuiDataUpdater::ice_staticId()
{
    return __MCS__GuiDataUpdater_ids[1];
}

::Ice::DispatchStatus
MCS::GuiDataUpdater::___UpdateData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Long time;
    ::MCS::GuiDataItem data;
    __is->read(time);
    data.__read(__is);
    __is->endReadEncaps();
    ::MCS::AMD_GuiDataUpdater_UpdateDataPtr __cb = new IceAsync::MCS::AMD_GuiDataUpdater_UpdateData(__inS);
    try
    {
        UpdateData_async(__cb, time, data, __current);
    }
    catch(const ::std::exception& __ex)
    {
        __cb->ice_exception(__ex);
    }
    catch(...)
    {
        __cb->ice_exception();
    }
    return ::Ice::DispatchAsync;
}

static ::std::string __MCS__GuiDataUpdater_all[] =
{
    "UpdateData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
MCS::GuiDataUpdater::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__MCS__GuiDataUpdater_all, __MCS__GuiDataUpdater_all + 5, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MCS__GuiDataUpdater_all)
    {
        case 0:
        {
            return ___UpdateData(in, current);
        }
        case 1:
        {
            return ___ice_id(in, current);
        }
        case 2:
        {
            return ___ice_ids(in, current);
        }
        case 3:
        {
            return ___ice_isA(in, current);
        }
        case 4:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MCS::GuiDataUpdater::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
MCS::GuiDataUpdater::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
MCS::GuiDataUpdater::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::GuiDataUpdater was not generated with stream support";
    throw ex;
}

void
MCS::GuiDataUpdater::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::GuiDataUpdater was not generated with stream support";
    throw ex;
}
#endif

void 
MCS::__patch__GuiDataUpdaterPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::MCS::GuiDataUpdaterPtr* p = static_cast< ::MCS::GuiDataUpdaterPtr*>(__addr);
    assert(p);
    *p = ::MCS::GuiDataUpdaterPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::MCS::GuiDataUpdater::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
MCS::GuiDataHub::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __MCS__GuiDataHub_ids[2] =
{
    "::Ice::Object",
    "::MCS::GuiDataHub"
};

bool
MCS::GuiDataHub::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MCS__GuiDataHub_ids, __MCS__GuiDataHub_ids + 2, _s);
}

::std::vector< ::std::string>
MCS::GuiDataHub::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MCS__GuiDataHub_ids[0], &__MCS__GuiDataHub_ids[2]);
}

const ::std::string&
MCS::GuiDataHub::ice_id(const ::Ice::Current&) const
{
    return __MCS__GuiDataHub_ids[1];
}

const ::std::string&
MCS::GuiDataHub::ice_staticId()
{
    return __MCS__GuiDataHub_ids[1];
}

::Ice::DispatchStatus
MCS::GuiDataHub::___SetPushCmd(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::MCS::GuiDataUpdaterPrx updater;
    ::MCS::GuiHub::GuiPushDataList list;
    ::Ice::Int session;
    ::MCS::__read(__is, updater);
    ::MCS::GuiHub::__readGuiPushDataList(__is, list);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = SetPushCmd(updater, list, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::GuiDataHub::___SetPushTimer(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int period;
    ::Ice::Int session;
    __is->read(period);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = SetPushTimer(period, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::GuiDataHub::___ReadData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::MCS::GuiHub::GuiCommand Tag;
    ::Ice::Int session;
    ::MCS::GuiHub::__read(__is, Tag);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::std::string __ret = ReadData(Tag, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::GuiDataHub::___WriteData(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::MCS::GuiHub::GuiCommand Tag;
    ::std::string Val;
    ::Ice::Int session;
    ::MCS::GuiHub::__read(__is, Tag);
    __is->read(Val);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = WriteData(Tag, Val, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::GuiDataHub::___SetDataUpdater(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::MCS::GuiDataUpdaterPrx updater;
    ::MCS::__read(__is, updater);
    __is->endReadEncaps();
    SetDataUpdater(updater, __current);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::GuiDataHub::___EraseDataUpdater(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::MCS::GuiDataUpdaterPrx updater;
    ::MCS::__read(__is, updater);
    __is->endReadEncaps();
    EraseDataUpdater(updater, __current);
    return ::Ice::DispatchOK;
}

static ::std::string __MCS__GuiDataHub_all[] =
{
    "EraseDataUpdater",
    "ReadData",
    "SetDataUpdater",
    "SetPushCmd",
    "SetPushTimer",
    "WriteData",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
MCS::GuiDataHub::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__MCS__GuiDataHub_all, __MCS__GuiDataHub_all + 10, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MCS__GuiDataHub_all)
    {
        case 0:
        {
            return ___EraseDataUpdater(in, current);
        }
        case 1:
        {
            return ___ReadData(in, current);
        }
        case 2:
        {
            return ___SetDataUpdater(in, current);
        }
        case 3:
        {
            return ___SetPushCmd(in, current);
        }
        case 4:
        {
            return ___SetPushTimer(in, current);
        }
        case 5:
        {
            return ___WriteData(in, current);
        }
        case 6:
        {
            return ___ice_id(in, current);
        }
        case 7:
        {
            return ___ice_ids(in, current);
        }
        case 8:
        {
            return ___ice_isA(in, current);
        }
        case 9:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MCS::GuiDataHub::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
MCS::GuiDataHub::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
MCS::GuiDataHub::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::GuiDataHub was not generated with stream support";
    throw ex;
}

void
MCS::GuiDataHub::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::GuiDataHub was not generated with stream support";
    throw ex;
}
#endif

void 
MCS::__patch__GuiDataHubPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::MCS::GuiDataHubPtr* p = static_cast< ::MCS::GuiDataHubPtr*>(__addr);
    assert(p);
    *p = ::MCS::GuiDataHubPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::MCS::GuiDataHub::ice_staticId(), v->ice_id());
    }
}

::Ice::ObjectPtr
MCS::UserManagement::ice_clone() const
{
    throw ::Ice::CloneNotImplementedException(__FILE__, __LINE__);
    return 0; // to avoid a warning with some compilers
}

static const ::std::string __MCS__UserManagement_ids[2] =
{
    "::Ice::Object",
    "::MCS::UserManagement"
};

bool
MCS::UserManagement::ice_isA(const ::std::string& _s, const ::Ice::Current&) const
{
    return ::std::binary_search(__MCS__UserManagement_ids, __MCS__UserManagement_ids + 2, _s);
}

::std::vector< ::std::string>
MCS::UserManagement::ice_ids(const ::Ice::Current&) const
{
    return ::std::vector< ::std::string>(&__MCS__UserManagement_ids[0], &__MCS__UserManagement_ids[2]);
}

const ::std::string&
MCS::UserManagement::ice_id(const ::Ice::Current&) const
{
    return __MCS__UserManagement_ids[1];
}

const ::std::string&
MCS::UserManagement::ice_staticId()
{
    return __MCS__UserManagement_ids[1];
}

::Ice::DispatchStatus
MCS::UserManagement::___Login(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string user;
    ::std::string pass;
    __is->read(user);
    __is->read(pass);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = Login(user, pass, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___Logout(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int session;
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = Logout(session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___CreateUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::std::string user;
    ::std::string pass;
    ::Ice::Int nRight;
    ::Ice::Int session;
    __is->read(user);
    __is->read(pass);
    __is->read(nRight);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = CreateUser(user, pass, nRight, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___SetUserPW(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nUID;
    ::std::string pass;
    ::Ice::Int session;
    __is->read(nUID);
    __is->read(pass);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = SetUserPW(nUID, pass, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___SetUserRight(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nUID;
    ::Ice::Int nRight;
    ::Ice::Int session;
    __is->read(nUID);
    __is->read(nRight);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = SetUserRight(nUID, nRight, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___DeleteUser(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nUID;
    ::Ice::Int session;
    __is->read(nUID);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = DeleteUser(nUID, session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___GetUserCount(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int session;
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::Ice::Int __ret = GetUserCount(session, __current);
    __os->write(__ret);
    return ::Ice::DispatchOK;
}

::Ice::DispatchStatus
MCS::UserManagement::___GetUserList(::IceInternal::Incoming& __inS, const ::Ice::Current& __current)
{
    __checkMode(::Ice::Idempotent, __current.mode);
    ::IceInternal::BasicStream* __is = __inS.is();
    __is->startReadEncaps();
    ::Ice::Int nBegin;
    ::Ice::Int nCount;
    ::Ice::Int session;
    __is->read(nBegin);
    __is->read(nCount);
    __is->read(session);
    __is->endReadEncaps();
    ::IceInternal::BasicStream* __os = __inS.os();
    ::MCS::UserList __ret = GetUserList(nBegin, nCount, session, __current);
    if(__ret.size() == 0)
    {
        __os->writeSize(0);
    }
    else
    {
        ::MCS::__writeUserList(__os, &__ret[0], &__ret[0] + __ret.size());
    }
    return ::Ice::DispatchOK;
}

static ::std::string __MCS__UserManagement_all[] =
{
    "CreateUser",
    "DeleteUser",
    "GetUserCount",
    "GetUserList",
    "Login",
    "Logout",
    "SetUserPW",
    "SetUserRight",
    "ice_id",
    "ice_ids",
    "ice_isA",
    "ice_ping"
};

::Ice::DispatchStatus
MCS::UserManagement::__dispatch(::IceInternal::Incoming& in, const ::Ice::Current& current)
{
    ::std::pair< ::std::string*, ::std::string*> r = ::std::equal_range(__MCS__UserManagement_all, __MCS__UserManagement_all + 12, current.operation);
    if(r.first == r.second)
    {
        throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
    }

    switch(r.first - __MCS__UserManagement_all)
    {
        case 0:
        {
            return ___CreateUser(in, current);
        }
        case 1:
        {
            return ___DeleteUser(in, current);
        }
        case 2:
        {
            return ___GetUserCount(in, current);
        }
        case 3:
        {
            return ___GetUserList(in, current);
        }
        case 4:
        {
            return ___Login(in, current);
        }
        case 5:
        {
            return ___Logout(in, current);
        }
        case 6:
        {
            return ___SetUserPW(in, current);
        }
        case 7:
        {
            return ___SetUserRight(in, current);
        }
        case 8:
        {
            return ___ice_id(in, current);
        }
        case 9:
        {
            return ___ice_ids(in, current);
        }
        case 10:
        {
            return ___ice_isA(in, current);
        }
        case 11:
        {
            return ___ice_ping(in, current);
        }
    }

    assert(false);
    throw ::Ice::OperationNotExistException(__FILE__, __LINE__, current.id, current.facet, current.operation);
}

void
MCS::UserManagement::__write(::IceInternal::BasicStream* __os) const
{
    __os->writeTypeId(ice_staticId());
    __os->startWriteSlice();
    __os->endWriteSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__write(__os);
#else
    ::Ice::Object::__write(__os);
#endif
}

void
MCS::UserManagement::__read(::IceInternal::BasicStream* __is, bool __rid)
{
    if(__rid)
    {
        ::std::string myId;
        __is->readTypeId(myId);
    }
    __is->startReadSlice();
    __is->endReadSlice();
#if defined(_MSC_VER) && (_MSC_VER < 1300) // VC++ 6 compiler bug
    Object::__read(__is, true);
#else
    ::Ice::Object::__read(__is, true);
#endif
}

// COMPILERFIX: Stream API is not supported with VC++ 6
#if !defined(_MSC_VER) || (_MSC_VER >= 1300)
void
MCS::UserManagement::__write(const ::Ice::OutputStreamPtr&) const
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::UserManagement was not generated with stream support";
    throw ex;
}

void
MCS::UserManagement::__read(const ::Ice::InputStreamPtr&, bool)
{
    Ice::MarshalException ex(__FILE__, __LINE__);
    ex.reason = "type MCS::UserManagement was not generated with stream support";
    throw ex;
}
#endif

void 
MCS::__patch__UserManagementPtr(void* __addr, ::Ice::ObjectPtr& v)
{
    ::MCS::UserManagementPtr* p = static_cast< ::MCS::UserManagementPtr*>(__addr);
    assert(p);
    *p = ::MCS::UserManagementPtr::dynamicCast(v);
    if(v && !*p)
    {
        IceInternal::Ex::throwUOE(::MCS::UserManagement::ice_staticId(), v->ice_id());
    }
}
